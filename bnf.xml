<?xml version="1.0" encoding="UTF-8"?>
<!--
This file is a "digital artifact" that contains the grammar specified by
ISO/IEC 39075.

The grammar is specified using the XML vocabulary used to specify
ISO/IEC 39075 itself. This file contains an XML DTD that specifies
that XML vocabulary. 

This grammar may be used by implementers of GQL-implementations
when generating parsers for the GQL language.
  -->
 
<!DOCTYPE grammar [
<!-- The following elements have the following meanings:
      * leq is the less-than-or-equal symbol
      * geq is the greater-than-or-equal symbol
      * neq is the not-equal symbol
      * concat is the concatenation symbol (two vertical bars)
      * prec is the precedes symbol (curved less than)
      * succ is the succeeds symbol (curved greater than)
      * simeq is the same-precedence symbol (equal sign where the top line is wavy)
      * rtarr is the right-arrow symbol
      * dblrtarr is the double-right-arrow symbol
      * dblltarr is the double-left-arrow symbol
      * dblltrtarr is the double-left-right-arrow symbol
      * mapsto is the right-arrow-from-bar symbol
      * setunion is the U-shaped symbol
      * rcbuh is the right curly brace upper hook
      * rcbmp is the right curly brace middle part
      * rcblh is the right curly brace lower hook
      * cbe is the curly brace extension
      * omega is a Greek lower-case omega
      * infinity is the infinity symbol
      * dotOp is the dot operator
      * apos is the punctuation apostrophe
      * quote puts curly-double-quotes around
      * bool identifies boolean values (true, false, unknown)
      * kw is used for keywords
      * sjkw is use for SQL/JSON keywords
      * repeat indicates that the preceding item is optionally repeated
      * BNF is used to represent BNF non-terminal symbols
      * bold indicates the that the text is in bold face type
-->

<!-- Element definitions 
-->

<!-- A grammar consists of a set of BNF definitions. 
-->
<!ELEMENT grammar ( BNFdef* )>


<!-- A BNFdef element defines a syntactic component.
-->
<!ELEMENT BNFdef (rhs)>
<!-- The attributes of BNFdef are:
      * name is the name of the component.
      * predictive indicates if the component is subject to "predicative production rules", 
        or not.
-->
<!ATTLIST BNFdef
  name CDATA #REQUIRED
  predicative ( yes | no ) #IMPLIED 
>


<!-- The rhs element specifies the production for the syntactic component being defined.
-->
<!ELEMENT rhs ( seeTheRules
              | ( ( alt )+, seeTheRules? )
              | ( ( opt 
                  | group 
                  | terminalsymbol 
                  | kw 
                  | sjkw 
                  | repeat 
                  | BNF 
                  ), seeTheRules? )+
              )>


<!-- An alt element specifies one alternative production for the syntactic component being defined.
-->
<!ELEMENT alt (#PCDATA | allAltsFrom | opt | group | terminalsymbol | kw | bold
               | sjkw | repeat | BNF )* >


<!-- A BNF element references a BNFdef
-->
<!ELEMENT BNF EMPTY>
<!-- The attributes of BNF are:
      * name is the name of the BNFdef.
      * part is the number of the part in which the BNFdef is defined if not this document.
      * standard is the number of the standard in which the BNFdef is defined if not this standard.
-->
<!ATTLIST BNF
  name CDATA #REQUIRED
  part CDATA #IMPLIED
  standard CDATA #IMPLIED
>


<!-- An allAltsFrom element represents "!! All alternatives from ..." 
     where ... identifies the other part.
-->
<!ELEMENT allAltsFrom EMPTY>
<!-- The attributes of allAltsFrom are:
      * part is the number of the part in which the BNFdef is originally defined.
      * standard is the number of the standard in which the BNFdef is originally defined if not
        this standard.
-->
<!ATTLIST allAltsFrom
  part CDATA #REQUIRED
  standard CDATA #IMPLIED
>


<!-- An opt element defines an optional component of a production.
     This is shown by enclosure between [ and ].
-->
<!ELEMENT opt (#PCDATA | alt | opt | group| terminalsymbol | kw | sjkw 
                 | repeat | BNF )*>


<!-- A group element groups two or more components of a production as an inseparable component.
     This is shown by enclosure between { and }.
-->
<!ELEMENT group (#PCDATA | alt | opt | group| terminalsymbol | kw | sjkw 
                 | repeat | BNF )*>


<!-- An repeat indicates possible repetition of a component.
    This is shown as three dots...
-->
<!ELEMENT repeat EMPTY>


<!-- A terminalsymbol element defines literal characters in the production.
-->
<!ELEMENT terminalsymbol (#PCDATA)*>
<!-- The attribute of terminalsymbol is:
     * unicode defines the code point(s). 
           These are defined as the 4, 5 or 6 hex character(s) separated by commas.
           For example, unicode="0026" or unicode="007E,005B"
-->
<!ATTLIST terminalsymbol
  unicode CDATA #IMPLIED
>

<!-- A kw element defines its contents as a normal keyword.
-->
<!ELEMENT kw (#PCDATA)>


<!-- An sjkw element defines its contents as a SQL/JSON keyword.
-->
<!ELEMENT sjkw (#PCDATA)>


<!-- A bold indicates the use of a bold-faced type font.
-->
<!ELEMENT bold (#PCDATA)>


<!-- A seeTheRules element represents the sequence "!! See the Syntax Rules".
-->
<!ELEMENT seeTheRules EMPTY>
]>

<grammar>
   <BNFdef name="GQL-program" predicative="no">
      <rhs>
         <alt>
            <BNF name="program activity"/>
            <opt>
               <BNF name="session close command"/>
            </opt>
         </alt>
         <alt>
            <BNF name="session close command"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="program activity" predicative="no">
      <rhs>
         <alt>
            <BNF name="session activity"/>
         </alt>
         <alt>
            <BNF name="transaction activity"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="session activity" predicative="no">
      <rhs>
         <alt>
            <BNF name="session reset command"/>
            <repeat/>
         </alt>
         <alt>
            <BNF name="session set command"/>
            <repeat/>
            <opt>
               <BNF name="session reset command"/>
               <repeat/>
            </opt>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="transaction activity" predicative="no">
      <rhs>
         <alt>
            <BNF name="start transaction command"/>
            <opt>
               <BNF name="procedure specification"/>
               <opt>
                  <BNF name="end transaction command"/>
               </opt>
            </opt>
         </alt>
         <alt>
            <BNF name="procedure specification"/>
            <opt>
               <BNF name="end transaction command"/>
            </opt>
         </alt>
         <alt>
            <BNF name="end transaction command"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="end transaction command" predicative="no">
      <rhs>
         <alt>
            <BNF name="rollback command"/>
         </alt>
         <alt>
            <BNF name="commit command"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="session set command" predicative="no">
      <rhs>
         <kw>SESSION</kw>
         <kw>SET</kw>
         <group>
            <alt>
               <BNF name="session set schema clause"/>
            </alt>
            <alt>
               <BNF name="session set graph clause"/>
            </alt>
            <alt>
               <BNF name="session set time zone clause"/>
            </alt>
            <alt>
               <BNF name="session set parameter clause"/>
            </alt>
         </group>
      </rhs>
   </BNFdef>
   <BNFdef name="session set schema clause" predicative="no">
      <rhs>
         <kw>SCHEMA</kw>
         <BNF name="schema reference"/>
      </rhs>
   </BNFdef>
   <BNFdef name="session set graph clause" predicative="no">
      <rhs>
         <opt>
            <kw>PROPERTY</kw>
         </opt>
         <kw>GRAPH</kw>
         <BNF name="graph expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="session set time zone clause" predicative="no">
      <rhs>
         <kw>TIME</kw>
         <kw>ZONE</kw>
         <BNF name="set time zone value"/>
      </rhs>
   </BNFdef>
   <BNFdef name="set time zone value" predicative="no">
      <rhs>
         <BNF name="time zone string"/>
      </rhs>
   </BNFdef>
   <BNFdef name="session set parameter clause" predicative="no">
      <rhs>
         <alt>
            <BNF name="session set graph parameter clause"/>
         </alt>
         <alt>
            <BNF name="session set binding table parameter clause"/>
         </alt>
         <alt>
            <BNF name="session set value parameter clause"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="session set graph parameter clause" predicative="no">
      <rhs>
         <opt>
            <kw>PROPERTY</kw>
         </opt>
         <kw>GRAPH</kw>
         <BNF name="session set parameter name"/>
         <BNF name="opt typed graph initializer"/>
      </rhs>
   </BNFdef>
   <BNFdef name="session set binding table parameter clause" predicative="no">
      <rhs>
         <opt>
            <kw>BINDING</kw>
         </opt>
         <kw>TABLE</kw>
         <BNF name="session set parameter name"/>
         <BNF name="opt typed binding table initializer"/>
      </rhs>
   </BNFdef>
   <BNFdef name="session set value parameter clause" predicative="no">
      <rhs>
         <kw>VALUE</kw>
         <BNF name="session set parameter name"/>
         <BNF name="opt typed value initializer"/>
      </rhs>
   </BNFdef>
   <BNFdef name="session set parameter name" predicative="no">
      <rhs>
         <opt>
            <kw>IF</kw>
            <kw>NOT</kw>
            <kw>EXISTS</kw>
         </opt>
         <BNF name="session parameter specification"/>
      </rhs>
   </BNFdef>
   <BNFdef name="session reset command" predicative="no">
      <rhs>
         <kw>SESSION</kw>
         <kw>RESET</kw>
         <opt>
            <BNF name="session reset arguments"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="session reset arguments" predicative="no">
      <rhs>
         <alt>
            <opt>
               <kw>ALL</kw>
            </opt>
            <group>
               <alt>
                  <kw>PARAMETERS</kw>
               </alt>
               <alt>
                  <kw>CHARACTERISTICS</kw>
               </alt>
            </group>
         </alt>
         <alt>
            <kw>SCHEMA</kw>
         </alt>
         <alt>
            <opt>
               <kw>PROPERTY</kw>
            </opt>
            <kw>GRAPH</kw>
         </alt>
         <alt>
            <kw>TIME</kw>
            <kw>ZONE</kw>
         </alt>
         <alt>
            <opt>
               <kw>PARAMETER</kw>
            </opt>
            <BNF name="session parameter specification"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="session close command" predicative="no">
      <rhs>
         <kw>SESSION</kw>
         <kw>CLOSE</kw>
      </rhs>
   </BNFdef>
   <BNFdef name="session parameter specification" predicative="no">
      <rhs>
         <BNF name="general parameter reference"/>
      </rhs>
   </BNFdef>
   <BNFdef name="start transaction command" predicative="no">
      <rhs>
         <kw>START</kw>
         <kw>TRANSACTION</kw>
         <opt>
            <BNF name="transaction characteristics"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="transaction characteristics" predicative="no">
      <rhs>
         <BNF name="transaction mode"/>
         <opt>
            <group>
               <BNF name="comma"/>
               <BNF name="transaction mode"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="transaction mode" predicative="no">
      <rhs>
         <alt>
            <BNF name="transaction access mode"/>
         </alt>
         <alt>
            <BNF name="implementation-defined access mode"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="transaction access mode" predicative="no">
      <rhs>
         <alt>
            <kw>READ</kw>
            <kw>ONLY</kw>
         </alt>
         <alt>
            <kw>READ</kw>
            <kw>WRITE</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="implementation-defined access mode" predicative="no">
      <rhs>
         <seeTheRules/>
      </rhs>
   </BNFdef>
   <BNFdef name="rollback command" predicative="no">
      <rhs>
         <kw>ROLLBACK</kw>
      </rhs>
   </BNFdef>
   <BNFdef name="commit command" predicative="no">
      <rhs>
         <kw>COMMIT</kw>
      </rhs>
   </BNFdef>
   <BNFdef name="nested procedure specification" predicative="no">
      <rhs>
         <BNF name="left brace"/>
         <BNF name="procedure specification"/>
         <BNF name="right brace"/>
      </rhs>
   </BNFdef>
   <BNFdef name="procedure specification" predicative="no">
      <rhs>
         <alt>
            <BNF name="catalog-modifying procedure specification"/>
         </alt>
         <alt>
            <BNF name="data-modifying procedure specification"/>
         </alt>
         <alt>
            <BNF name="query specification"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="catalog-modifying procedure specification" predicative="no">
      <rhs>
         <BNF name="procedure body"/>
      </rhs>
   </BNFdef>
   <BNFdef name="nested data-modifying procedure specification" predicative="no">
      <rhs>
         <BNF name="left brace"/>
         <BNF name="data-modifying procedure specification"/>
         <BNF name="right brace"/>
      </rhs>
   </BNFdef>
   <BNFdef name="data-modifying procedure specification" predicative="no">
      <rhs>
         <BNF name="procedure body"/>
      </rhs>
   </BNFdef>
   <BNFdef name="nested query specification" predicative="no">
      <rhs>
         <BNF name="left brace"/>
         <BNF name="query specification"/>
         <BNF name="right brace"/>
      </rhs>
   </BNFdef>
   <BNFdef name="query specification" predicative="no">
      <rhs>
         <BNF name="procedure body"/>
      </rhs>
   </BNFdef>
   <BNFdef name="procedure body" predicative="no">
      <rhs>
         <opt>
            <BNF name="at schema clause"/>
         </opt>
         <opt>
            <BNF name="binding variable definition block"/>
         </opt>
         <BNF name="statement block"/>
      </rhs>
   </BNFdef>
   <BNFdef name="binding variable definition block" predicative="no">
      <rhs>
         <BNF name="binding variable definition"/>
         <repeat/>
      </rhs>
   </BNFdef>
   <BNFdef name="binding variable definition" predicative="no">
      <rhs>
         <alt>
            <BNF name="graph variable definition"/>
         </alt>
         <alt>
            <BNF name="binding table variable definition"/>
         </alt>
         <alt>
            <BNF name="value variable definition"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="statement block" predicative="no">
      <rhs>
         <BNF name="statement"/>
         <opt>
            <BNF name="next statement"/>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="statement" predicative="no">
      <rhs>
         <alt>
            <BNF name="linear catalog-modifying statement"/>
         </alt>
         <alt>
            <BNF name="linear data-modifying statement"/>
         </alt>
         <alt>
            <BNF name="composite query statement"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="next statement" predicative="no">
      <rhs>
         <kw>NEXT</kw>
         <opt>
            <BNF name="yield clause"/>
         </opt>
         <BNF name="statement"/>
      </rhs>
   </BNFdef>
   <BNFdef name="graph variable definition" predicative="no">
      <rhs>
         <opt>
            <kw>PROPERTY</kw>
         </opt>
         <kw>GRAPH</kw>
         <BNF name="binding variable"/>
         <BNF name="opt typed graph initializer"/>
      </rhs>
   </BNFdef>
   <BNFdef name="opt typed graph initializer" predicative="no">
      <rhs>
         <opt>
            <opt>
               <BNF name="typed"/>
            </opt>
            <BNF name="graph reference value type"/>
         </opt>
         <BNF name="graph initializer"/>
      </rhs>
   </BNFdef>
   <BNFdef name="graph initializer" predicative="no">
      <rhs>
         <BNF name="equals operator"/>
         <BNF name="graph expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="binding table variable definition" predicative="no">
      <rhs>
         <opt>
            <kw>BINDING</kw>
         </opt>
         <kw>TABLE</kw>
         <BNF name="binding variable"/>
         <BNF name="opt typed binding table initializer"/>
      </rhs>
   </BNFdef>
   <BNFdef name="opt typed binding table initializer" predicative="no">
      <rhs>
         <opt>
            <opt>
               <BNF name="typed"/>
            </opt>
            <BNF name="binding table reference value type"/>
         </opt>
         <BNF name="binding table initializer"/>
      </rhs>
   </BNFdef>
   <BNFdef name="binding table initializer" predicative="no">
      <rhs>
         <BNF name="equals operator"/>
         <BNF name="binding table expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="value variable definition" predicative="no">
      <rhs>
         <kw>VALUE</kw>
         <BNF name="binding variable"/>
         <BNF name="opt typed value initializer"/>
      </rhs>
   </BNFdef>
   <BNFdef name="opt typed value initializer" predicative="no">
      <rhs>
         <opt>
            <opt>
               <BNF name="typed"/>
            </opt>
            <BNF name="value type"/>
         </opt>
         <BNF name="value initializer"/>
      </rhs>
   </BNFdef>
   <BNFdef name="value initializer" predicative="no">
      <rhs>
         <BNF name="equals operator"/>
         <BNF name="value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="graph expression" predicative="no">
      <rhs>
         <alt>
            <BNF name="object expression primary"/>
         </alt>
         <alt>
            <BNF name="graph reference"/>
         </alt>
         <alt>
            <BNF name="object name or binding variable"/>
         </alt>
         <alt>
            <BNF name="current graph"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="current graph" predicative="no">
      <rhs>
         <alt>
            <kw>CURRENT_PROPERTY_GRAPH</kw>
         </alt>
         <alt>
            <kw>CURRENT_GRAPH</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="binding table expression" predicative="no">
      <rhs>
         <alt>
            <BNF name="nested binding table query specification"/>
         </alt>
         <alt>
            <BNF name="object expression primary"/>
         </alt>
         <alt>
            <BNF name="binding table reference"/>
         </alt>
         <alt>
            <BNF name="object name or binding variable"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="nested binding table query specification" predicative="no">
      <rhs>
         <BNF name="nested query specification"/>
      </rhs>
   </BNFdef>
   <BNFdef name="object expression primary" predicative="no">
      <rhs>
         <alt>
            <kw>VARIABLE</kw>
            <BNF name="value expression primary"/>
         </alt>
         <alt>
            <BNF name="parenthesized value expression"/>
         </alt>
         <alt>
            <BNF name="non-parenthesized value expression primary special case"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="linear catalog-modifying statement" predicative="no">
      <rhs>
         <BNF name="simple catalog-modifying statement"/>
         <repeat/>
      </rhs>
   </BNFdef>
   <BNFdef name="simple catalog-modifying statement" predicative="no">
      <rhs>
         <alt>
            <BNF name="primitive catalog-modifying statement"/>
         </alt>
         <alt>
            <BNF name="call catalog-modifying procedure statement"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="primitive catalog-modifying statement" predicative="no">
      <rhs>
         <alt>
            <BNF name="create schema statement"/>
         </alt>
         <alt>
            <BNF name="drop schema statement"/>
         </alt>
         <alt>
            <BNF name="create graph statement"/>
         </alt>
         <alt>
            <BNF name="drop graph statement"/>
         </alt>
         <alt>
            <BNF name="create graph type statement"/>
         </alt>
         <alt>
            <BNF name="drop graph type statement"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="create schema statement" predicative="no">
      <rhs>
         <kw>CREATE</kw>
         <kw>SCHEMA</kw>
         <opt>
            <kw>IF</kw>
            <kw>NOT</kw>
            <kw>EXISTS</kw>
         </opt>
         <BNF name="catalog schema parent and name"/>
      </rhs>
   </BNFdef>
   <BNFdef name="drop schema statement" predicative="no">
      <rhs>
         <kw>DROP</kw>
         <kw>SCHEMA</kw>
         <opt>
            <kw>IF</kw>
            <kw>EXISTS</kw>
         </opt>
         <BNF name="catalog schema parent and name"/>
      </rhs>
   </BNFdef>
   <BNFdef name="create graph statement" predicative="no">
      <rhs>
         <kw>CREATE</kw>
         <group>
            <alt>
               <opt>
                  <kw>PROPERTY</kw>
               </opt>
               <kw>GRAPH</kw>
               <opt>
                  <kw>IF</kw>
                  <kw>NOT</kw>
                  <kw>EXISTS</kw>
               </opt>
            </alt>
            <alt>
               <kw>OR</kw>
               <kw>REPLACE</kw>
               <opt>
                  <kw>PROPERTY</kw>
               </opt>
               <kw>GRAPH</kw>
            </alt>
         </group>
         <BNF name="catalog graph parent and name"/>
         <group>
            <alt>
               <BNF name="open graph type"/>
            </alt>
            <alt>
               <BNF name="of graph type"/>
            </alt>
         </group>
         <opt>
            <BNF name="graph source"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="open graph type" predicative="no">
      <rhs>
         <opt>
            <BNF name="typed"/>
         </opt>
         <kw>ANY</kw>
         <opt>
            <opt>
               <kw>PROPERTY</kw>
            </opt>
            <kw>GRAPH</kw>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="of graph type" predicative="no">
      <rhs>
         <alt>
            <BNF name="graph type like graph"/>
         </alt>
         <alt>
            <opt>
               <BNF name="typed"/>
            </opt>
            <BNF name="graph type reference"/>
         </alt>
         <alt>
            <opt>
               <BNF name="typed"/>
            </opt>
            <opt>
               <opt>
                  <kw>PROPERTY</kw>
               </opt>
               <kw>GRAPH</kw>
            </opt>
            <BNF name="nested graph type specification"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="graph type like graph" predicative="no">
      <rhs>
         <kw>LIKE</kw>
         <BNF name="graph expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="graph source" predicative="no">
      <rhs>
         <kw>AS</kw>
         <kw>COPY</kw>
         <kw>OF</kw>
         <BNF name="graph expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="drop graph statement" predicative="no">
      <rhs>
         <kw>DROP</kw>
         <opt>
            <kw>PROPERTY</kw>
         </opt>
         <kw>GRAPH</kw>
         <opt>
            <kw>IF</kw>
            <kw>EXISTS</kw>
         </opt>
         <BNF name="catalog graph parent and name"/>
      </rhs>
   </BNFdef>
   <BNFdef name="create graph type statement" predicative="no">
      <rhs>
         <kw>CREATE</kw>
         <group>
            <alt>
               <opt>
                  <kw>PROPERTY</kw>
               </opt>
               <kw>GRAPH</kw>
               <kw>TYPE</kw>
               <opt>
                  <kw>IF</kw>
                  <kw>NOT</kw>
                  <kw>EXISTS</kw>
               </opt>
            </alt>
            <alt>
               <kw>OR</kw>
               <kw>REPLACE</kw>
               <opt>
                  <kw>PROPERTY</kw>
               </opt>
               <kw>GRAPH</kw>
               <kw>TYPE</kw>
            </alt>
         </group>
         <BNF name="catalog graph type parent and name"/>
         <BNF name="graph type source"/>
      </rhs>
   </BNFdef>
   <BNFdef name="graph type source" predicative="no">
      <rhs>
         <alt>
            <opt>
               <kw>AS</kw>
            </opt>
            <BNF name="copy of graph type"/>
         </alt>
         <alt>
            <BNF name="graph type like graph"/>
         </alt>
         <alt>
            <opt>
               <kw>AS</kw>
            </opt>
            <BNF name="nested graph type specification"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="copy of graph type" predicative="no">
      <rhs>
         <kw>COPY</kw>
         <kw>OF</kw>
         <group>
            <alt>
               <BNF name="graph type reference"/>
            </alt>
            <alt>
               <BNF name="external object reference"/>
            </alt>
         </group>
      </rhs>
   </BNFdef>
   <BNFdef name="drop graph type statement" predicative="no">
      <rhs>
         <kw>DROP</kw>
         <opt>
            <kw>PROPERTY</kw>
         </opt>
         <kw>GRAPH</kw>
         <kw>TYPE</kw>
         <opt>
            <kw>IF</kw>
            <kw>EXISTS</kw>
         </opt>
         <BNF name="catalog graph type parent and name"/>
      </rhs>
   </BNFdef>
   <BNFdef name="call catalog-modifying procedure statement" predicative="no">
      <rhs>
         <BNF name="call procedure statement"/>
      </rhs>
   </BNFdef>
   <BNFdef name="linear data-modifying statement" predicative="no">
      <rhs>
         <alt>
            <BNF name="focused linear data-modifying statement"/>
         </alt>
         <alt>
            <BNF name="ambient linear data-modifying statement"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="focused linear data-modifying statement" predicative="no">
      <rhs>
         <alt>
            <BNF name="focused linear data-modifying statement body"/>
         </alt>
         <alt>
            <BNF name="focused nested data-modifying procedure specification"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="focused linear data-modifying statement body" predicative="no">
      <rhs>
         <BNF name="use graph clause"/>
         <BNF name="simple linear data-accessing statement"/>
         <opt>
            <BNF name="primitive result statement"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="focused nested data-modifying procedure specification"
            predicative="no">
      <rhs>
         <BNF name="use graph clause"/>
         <BNF name="nested data-modifying procedure specification"/>
      </rhs>
   </BNFdef>
   <BNFdef name="ambient linear data-modifying statement" predicative="no">
      <rhs>
         <alt>
            <BNF name="ambient linear data-modifying statement body"/>
         </alt>
         <alt>
            <BNF name="nested data-modifying procedure specification"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="ambient linear data-modifying statement body" predicative="no">
      <rhs>
         <BNF name="simple linear data-accessing statement"/>
         <opt>
            <BNF name="primitive result statement"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="simple linear data-accessing statement" predicative="no">
      <rhs>
         <BNF name="simple data-accessing statement"/>
         <repeat/>
      </rhs>
   </BNFdef>
   <BNFdef name="simple data-accessing statement" predicative="no">
      <rhs>
         <alt>
            <BNF name="simple query statement"/>
         </alt>
         <alt>
            <BNF name="simple data-modifying statement"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="simple data-modifying statement" predicative="no">
      <rhs>
         <alt>
            <BNF name="primitive data-modifying statement"/>
         </alt>
         <alt>
            <BNF name="call data-modifying procedure statement"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="primitive data-modifying statement" predicative="no">
      <rhs>
         <alt>
            <BNF name="insert statement"/>
         </alt>
         <alt>
            <BNF name="set statement"/>
         </alt>
         <alt>
            <BNF name="remove statement"/>
         </alt>
         <alt>
            <BNF name="delete statement"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="insert statement" predicative="no">
      <rhs>
         <kw>INSERT</kw>
         <BNF name="insert graph pattern"/>
      </rhs>
   </BNFdef>
   <BNFdef name="set statement" predicative="no">
      <rhs>
         <kw>SET</kw>
         <BNF name="set item list"/>
      </rhs>
   </BNFdef>
   <BNFdef name="set item list" predicative="no">
      <rhs>
         <BNF name="set item"/>
         <opt>
            <group>
               <BNF name="comma"/>
               <BNF name="set item"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="set item" predicative="no">
      <rhs>
         <alt>
            <BNF name="set property item"/>
         </alt>
         <alt>
            <BNF name="set all properties item"/>
         </alt>
         <alt>
            <BNF name="set label item"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="set property item" predicative="no">
      <rhs>
         <BNF name="binding variable reference"/>
         <BNF name="period"/>
         <BNF name="property name"/>
         <BNF name="equals operator"/>
         <BNF name="value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="set all properties item" predicative="no">
      <rhs>
         <BNF name="binding variable reference"/>
         <BNF name="equals operator"/>
         <BNF name="left brace"/>
         <opt>
            <BNF name="property key value pair list"/>
         </opt>
         <BNF name="right brace"/>
      </rhs>
   </BNFdef>
   <BNFdef name="set label item" predicative="no">
      <rhs>
         <BNF name="binding variable reference"/>
         <BNF name="is or colon"/>
         <BNF name="label name"/>
      </rhs>
   </BNFdef>
   <BNFdef name="remove statement" predicative="no">
      <rhs>
         <kw>REMOVE</kw>
         <BNF name="remove item list"/>
      </rhs>
   </BNFdef>
   <BNFdef name="remove item list" predicative="no">
      <rhs>
         <BNF name="remove item"/>
         <opt>
            <group>
               <BNF name="comma"/>
               <BNF name="remove item"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="remove item" predicative="no">
      <rhs>
         <alt>
            <BNF name="remove property item"/>
         </alt>
         <alt>
            <BNF name="remove label item"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="remove property item" predicative="no">
      <rhs>
         <BNF name="binding variable reference"/>
         <BNF name="period"/>
         <BNF name="property name"/>
      </rhs>
   </BNFdef>
   <BNFdef name="remove label item" predicative="no">
      <rhs>
         <BNF name="binding variable reference"/>
         <BNF name="is or colon"/>
         <BNF name="label name"/>
      </rhs>
   </BNFdef>
   <BNFdef name="delete statement" predicative="no">
      <rhs>
         <opt>
            <alt>
               <kw>DETACH</kw>
            </alt>
            <alt>
               <kw>NODETACH</kw>
            </alt>
         </opt>
         <kw>DELETE</kw>
         <BNF name="delete item list"/>
      </rhs>
   </BNFdef>
   <BNFdef name="delete item list" predicative="no">
      <rhs>
         <BNF name="delete item"/>
         <opt>
            <group>
               <BNF name="comma"/>
               <BNF name="delete item"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="delete item" predicative="no">
      <rhs>
         <BNF name="value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="call data-modifying procedure statement" predicative="no">
      <rhs>
         <BNF name="call procedure statement"/>
      </rhs>
   </BNFdef>
   <BNFdef name="composite query statement" predicative="no">
      <rhs>
         <BNF name="composite query expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="composite query expression" predicative="no">
      <rhs>
         <alt>
            <BNF name="composite query expression"/>
            <BNF name="query conjunction"/>
            <BNF name="composite query primary"/>
         </alt>
         <alt>
            <BNF name="composite query primary"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="query conjunction" predicative="no">
      <rhs>
         <alt>
            <BNF name="set operator"/>
         </alt>
         <alt>
            <kw>OTHERWISE</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="set operator" predicative="no">
      <rhs>
         <alt>
            <kw>UNION</kw>
            <opt>
               <BNF name="set quantifier"/>
            </opt>
         </alt>
         <alt>
            <kw>EXCEPT</kw>
            <opt>
               <BNF name="set quantifier"/>
            </opt>
         </alt>
         <alt>
            <kw>INTERSECT</kw>
            <opt>
               <BNF name="set quantifier"/>
            </opt>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="composite query primary" predicative="no">
      <rhs>
         <BNF name="linear query statement"/>
      </rhs>
   </BNFdef>
   <BNFdef name="linear query statement" predicative="no">
      <rhs>
         <alt>
            <BNF name="focused linear query statement"/>
         </alt>
         <alt>
            <BNF name="ambient linear query statement"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="focused linear query statement" predicative="no">
      <rhs>
         <alt>
            <opt>
               <BNF name="focused linear query statement part"/>
               <repeat/>
            </opt>
            <BNF name="focused linear query and primitive result statement part"/>
         </alt>
         <alt>
            <BNF name="focused primitive result statement"/>
         </alt>
         <alt>
            <BNF name="focused nested query specification"/>
         </alt>
         <alt>
            <BNF name="select statement"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="focused linear query statement part" predicative="no">
      <rhs>
         <BNF name="use graph clause"/>
         <BNF name="simple linear query statement"/>
      </rhs>
   </BNFdef>
   <BNFdef name="focused linear query and primitive result statement part"
            predicative="no">
      <rhs>
         <BNF name="use graph clause"/>
         <BNF name="simple linear query statement"/>
         <BNF name="primitive result statement"/>
      </rhs>
   </BNFdef>
   <BNFdef name="focused primitive result statement" predicative="no">
      <rhs>
         <BNF name="use graph clause"/>
         <BNF name="primitive result statement"/>
      </rhs>
   </BNFdef>
   <BNFdef name="focused nested query specification" predicative="no">
      <rhs>
         <BNF name="use graph clause"/>
         <BNF name="nested query specification"/>
      </rhs>
   </BNFdef>
   <BNFdef name="ambient linear query statement" predicative="no">
      <rhs>
         <alt>
            <opt>
               <BNF name="simple linear query statement"/>
            </opt>
            <BNF name="primitive result statement"/>
         </alt>
         <alt>
            <BNF name="nested query specification"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="simple linear query statement" predicative="no">
      <rhs>
         <BNF name="simple query statement"/>
         <repeat/>
      </rhs>
   </BNFdef>
   <BNFdef name="simple query statement" predicative="no">
      <rhs>
         <alt>
            <BNF name="primitive query statement"/>
         </alt>
         <alt>
            <BNF name="call query statement"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="primitive query statement" predicative="no">
      <rhs>
         <alt>
            <BNF name="match statement"/>
         </alt>
         <alt>
            <BNF name="let statement"/>
         </alt>
         <alt>
            <BNF name="for statement"/>
         </alt>
         <alt>
            <BNF name="filter statement"/>
         </alt>
         <alt>
            <BNF name="order by and page statement"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="match statement" predicative="no">
      <rhs>
         <alt>
            <BNF name="simple match statement"/>
         </alt>
         <alt>
            <BNF name="optional match statement"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="simple match statement" predicative="no">
      <rhs>
         <kw>MATCH</kw>
         <BNF name="graph pattern binding table"/>
      </rhs>
   </BNFdef>
   <BNFdef name="optional match statement" predicative="no">
      <rhs>
         <kw>OPTIONAL</kw>
         <BNF name="optional operand"/>
      </rhs>
   </BNFdef>
   <BNFdef name="optional operand" predicative="no">
      <rhs>
         <alt>
            <BNF name="simple match statement"/>
         </alt>
         <alt>
            <BNF name="left brace"/>
            <BNF name="match statement block"/>
            <BNF name="right brace"/>
         </alt>
         <alt>
            <BNF name="left paren"/>
            <BNF name="match statement block"/>
            <BNF name="right paren"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="match statement block" predicative="no">
      <rhs>
         <BNF name="match statement"/>
         <repeat/>
      </rhs>
   </BNFdef>
   <BNFdef name="call query statement" predicative="no">
      <rhs>
         <BNF name="call procedure statement"/>
      </rhs>
   </BNFdef>
   <BNFdef name="filter statement" predicative="no">
      <rhs>
         <kw>FILTER</kw>
         <group>
            <alt>
               <BNF name="where clause"/>
            </alt>
            <alt>
               <BNF name="search condition"/>
            </alt>
         </group>
      </rhs>
   </BNFdef>
   <BNFdef name="let statement" predicative="no">
      <rhs>
         <kw>LET</kw>
         <BNF name="let variable definition list"/>
      </rhs>
   </BNFdef>
   <BNFdef name="let variable definition list" predicative="no">
      <rhs>
         <BNF name="let variable definition"/>
         <opt>
            <group>
               <BNF name="comma"/>
               <BNF name="let variable definition"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="let variable definition" predicative="no">
      <rhs>
         <alt>
            <BNF name="value variable definition"/>
         </alt>
         <alt>
            <BNF name="binding variable"/>
            <BNF name="equals operator"/>
            <BNF name="value expression"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="for statement" predicative="no">
      <rhs>
         <kw>FOR</kw>
         <BNF name="for item"/>
         <opt>
            <BNF name="for ordinality or offset"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="for item" predicative="no">
      <rhs>
         <BNF name="for item alias"/>
         <BNF name="for item source"/>
      </rhs>
   </BNFdef>
   <BNFdef name="for item alias" predicative="no">
      <rhs>
         <BNF name="binding variable"/>
         <kw>IN</kw>
      </rhs>
   </BNFdef>
   <BNFdef name="for item source" predicative="no">
      <rhs>
         <alt>
            <BNF name="list value expression"/>
         </alt>
         <alt>
            <BNF name="binding table reference value expression"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="for ordinality or offset" predicative="no">
      <rhs>
         <kw>WITH</kw>
         <group>
            <alt>
               <kw>ORDINALITY</kw>
            </alt>
            <alt>
               <kw>OFFSET</kw>
            </alt>
         </group>
         <BNF name="binding variable"/>
      </rhs>
   </BNFdef>
   <BNFdef name="order by and page statement" predicative="no">
      <rhs>
         <alt>
            <BNF name="order by clause"/>
            <opt>
               <BNF name="offset clause"/>
            </opt>
            <opt>
               <BNF name="limit clause"/>
            </opt>
         </alt>
         <alt>
            <BNF name="offset clause"/>
            <opt>
               <BNF name="limit clause"/>
            </opt>
         </alt>
         <alt>
            <BNF name="limit clause"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="primitive result statement" predicative="no">
      <rhs>
         <alt>
            <BNF name="return statement"/>
            <opt>
               <BNF name="order by and page statement"/>
            </opt>
         </alt>
         <alt>
            <kw>FINISH</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="return statement" predicative="no">
      <rhs>
         <kw>RETURN</kw>
         <BNF name="return statement body"/>
      </rhs>
   </BNFdef>
   <BNFdef name="return statement body" predicative="no">
      <rhs>
         <alt>
            <opt>
               <BNF name="set quantifier"/>
            </opt>
            <group>
               <alt>
                  <BNF name="asterisk"/>
               </alt>
               <alt>
                  <BNF name="return item list"/>
               </alt>
            </group>
            <opt>
               <BNF name="group by clause"/>
            </opt>
         </alt>
         <alt>
            <kw>NO</kw>
            <kw>BINDINGS</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="return item list" predicative="no">
      <rhs>
         <BNF name="return item"/>
         <opt>
            <group>
               <BNF name="comma"/>
               <BNF name="return item"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="return item" predicative="no">
      <rhs>
         <BNF name="aggregating value expression"/>
         <opt>
            <BNF name="return item alias"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="return item alias" predicative="no">
      <rhs>
         <kw>AS</kw>
         <BNF name="identifier"/>
      </rhs>
   </BNFdef>
   <BNFdef name="select statement" predicative="no">
      <rhs>
         <kw>SELECT</kw>
         <opt>
            <BNF name="set quantifier"/>
         </opt>
         <group>
            <alt>
               <BNF name="asterisk"/>
            </alt>
            <alt>
               <BNF name="select item list"/>
            </alt>
         </group>
         <opt>
            <BNF name="select statement body"/>
            <opt>
               <BNF name="where clause"/>
            </opt>
            <opt>
               <BNF name="group by clause"/>
            </opt>
            <opt>
               <BNF name="having clause"/>
            </opt>
            <opt>
               <BNF name="order by clause"/>
            </opt>
            <opt>
               <BNF name="offset clause"/>
            </opt>
            <opt>
               <BNF name="limit clause"/>
            </opt>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="select item list" predicative="no">
      <rhs>
         <BNF name="select item"/>
         <opt>
            <group>
               <BNF name="comma"/>
               <BNF name="select item"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="select item" predicative="no">
      <rhs>
         <BNF name="aggregating value expression"/>
         <opt>
            <BNF name="select item alias"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="select item alias" predicative="no">
      <rhs>
         <kw>AS</kw>
         <BNF name="identifier"/>
      </rhs>
   </BNFdef>
   <BNFdef name="having clause" predicative="no">
      <rhs>
         <kw>HAVING</kw>
         <BNF name="search condition"/>
      </rhs>
   </BNFdef>
   <BNFdef name="select statement body" predicative="no">
      <rhs>
         <kw>FROM</kw>
         <group>
            <alt>
               <BNF name="select graph match list"/>
            </alt>
            <alt>
               <BNF name="select query specification"/>
            </alt>
         </group>
      </rhs>
   </BNFdef>
   <BNFdef name="select graph match list" predicative="no">
      <rhs>
         <BNF name="select graph match"/>
         <opt>
            <group>
               <BNF name="comma"/>
               <BNF name="select graph match"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="select graph match" predicative="no">
      <rhs>
         <BNF name="graph expression"/>
         <BNF name="match statement"/>
      </rhs>
   </BNFdef>
   <BNFdef name="select query specification" predicative="no">
      <rhs>
         <alt>
            <BNF name="nested query specification"/>
         </alt>
         <alt>
            <BNF name="graph expression"/>
            <BNF name="nested query specification"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="call procedure statement" predicative="no">
      <rhs>
         <opt>
            <kw>OPTIONAL</kw>
         </opt>
         <kw>CALL</kw>
         <BNF name="procedure call"/>
      </rhs>
   </BNFdef>
   <BNFdef name="procedure call" predicative="no">
      <rhs>
         <alt>
            <BNF name="inline procedure call"/>
         </alt>
         <alt>
            <BNF name="named procedure call"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="inline procedure call" predicative="no">
      <rhs>
         <opt>
            <BNF name="variable scope clause"/>
         </opt>
         <BNF name="nested procedure specification"/>
      </rhs>
   </BNFdef>
   <BNFdef name="variable scope clause" predicative="no">
      <rhs>
         <BNF name="left paren"/>
         <opt>
            <BNF name="binding variable reference list"/>
         </opt>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="binding variable reference list" predicative="no">
      <rhs>
         <BNF name="binding variable reference"/>
         <opt>
            <group>
               <BNF name="comma"/>
               <BNF name="binding variable reference"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="named procedure call" predicative="no">
      <rhs>
         <BNF name="procedure reference"/>
         <BNF name="left paren"/>
         <opt>
            <BNF name="procedure argument list"/>
         </opt>
         <BNF name="right paren"/>
         <opt>
            <BNF name="yield clause"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="procedure argument list" predicative="no">
      <rhs>
         <BNF name="procedure argument"/>
         <opt>
            <group>
               <BNF name="comma"/>
               <BNF name="procedure argument"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="procedure argument" predicative="no">
      <rhs>
         <BNF name="value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="at schema clause" predicative="no">
      <rhs>
         <kw>AT</kw>
         <BNF name="schema reference"/>
      </rhs>
   </BNFdef>
   <BNFdef name="use graph clause" predicative="no">
      <rhs>
         <kw>USE</kw>
         <BNF name="graph expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="graph pattern binding table" predicative="no">
      <rhs>
         <BNF name="graph pattern"/>
         <opt>
            <BNF name="graph pattern yield clause"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="graph pattern yield clause" predicative="no">
      <rhs>
         <kw>YIELD</kw>
         <BNF name="graph pattern yield item list"/>
      </rhs>
   </BNFdef>
   <BNFdef name="graph pattern yield item list" predicative="no">
      <rhs>
         <alt>
            <BNF name="graph pattern yield item"/>
            <opt>
               <group>
                  <BNF name="comma"/>
                  <BNF name="graph pattern yield item"/>
               </group>
               <repeat/>
            </opt>
         </alt>
         <alt>
            <kw>NO</kw>
            <kw>BINDINGS</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="graph pattern yield item" predicative="no">
      <rhs>
         <alt>
            <BNF name="element variable reference"/>
         </alt>
         <alt>
            <BNF name="path variable reference"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="graph pattern" predicative="no">
      <rhs>
         <opt>
            <BNF name="match mode"/>
         </opt>
         <BNF name="path pattern list"/>
         <opt>
            <BNF name="keep clause"/>
         </opt>
         <opt>
            <BNF name="graph pattern where clause"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="match mode" predicative="no">
      <rhs>
         <alt>
            <BNF name="repeatable elements match mode"/>
         </alt>
         <alt>
            <BNF name="different edges match mode"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="repeatable elements match mode" predicative="no">
      <rhs>
         <kw>REPEATABLE</kw>
         <BNF name="element bindings or elements"/>
      </rhs>
   </BNFdef>
   <BNFdef name="different edges match mode" predicative="no">
      <rhs>
         <kw>DIFFERENT</kw>
         <BNF name="edge bindings or edges"/>
      </rhs>
   </BNFdef>
   <BNFdef name="element bindings or elements" predicative="no">
      <rhs>
         <alt>
            <kw>ELEMENT</kw>
            <opt>
               <kw>BINDINGS</kw>
            </opt>
         </alt>
         <alt>
            <kw>ELEMENTS</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="edge bindings or edges" predicative="no">
      <rhs>
         <alt>
            <BNF name="edge synonym"/>
            <opt>
               <kw>BINDINGS</kw>
            </opt>
         </alt>
         <alt>
            <BNF name="edges synonym"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="path pattern list" predicative="no">
      <rhs>
         <BNF name="path pattern"/>
         <opt>
            <group>
               <BNF name="comma"/>
               <BNF name="path pattern"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="path pattern" predicative="no">
      <rhs>
         <opt>
            <BNF name="path variable declaration"/>
         </opt>
         <opt>
            <BNF name="path pattern prefix"/>
         </opt>
         <BNF name="path pattern expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="path variable declaration" predicative="no">
      <rhs>
         <BNF name="path variable"/>
         <BNF name="equals operator"/>
      </rhs>
   </BNFdef>
   <BNFdef name="keep clause" predicative="no">
      <rhs>
         <kw>KEEP</kw>
         <BNF name="path pattern prefix"/>
      </rhs>
   </BNFdef>
   <BNFdef name="graph pattern where clause" predicative="no">
      <rhs>
         <kw>WHERE</kw>
         <BNF name="search condition"/>
      </rhs>
   </BNFdef>
   <BNFdef name="insert graph pattern" predicative="no">
      <rhs>
         <BNF name="insert path pattern list"/>
      </rhs>
   </BNFdef>
   <BNFdef name="insert path pattern list" predicative="no">
      <rhs>
         <BNF name="insert path pattern"/>
         <opt>
            <group>
               <BNF name="comma"/>
               <BNF name="insert path pattern"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="insert path pattern" predicative="no">
      <rhs>
         <BNF name="insert node pattern"/>
         <opt>
            <group>
               <BNF name="insert edge pattern"/>
               <BNF name="insert node pattern"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="insert node pattern" predicative="no">
      <rhs>
         <BNF name="left paren"/>
         <opt>
            <BNF name="insert element pattern filler"/>
         </opt>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="insert edge pattern" predicative="no">
      <rhs>
         <alt>
            <BNF name="insert edge pointing left"/>
         </alt>
         <alt>
            <BNF name="insert edge pointing right"/>
         </alt>
         <alt>
            <BNF name="insert edge undirected"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="insert edge pointing left" predicative="no">
      <rhs>
         <BNF name="left arrow bracket"/>
         <opt>
            <BNF name="insert element pattern filler"/>
         </opt>
         <BNF name="right bracket minus"/>
      </rhs>
   </BNFdef>
   <BNFdef name="insert edge pointing right" predicative="no">
      <rhs>
         <BNF name="minus left bracket"/>
         <opt>
            <BNF name="insert element pattern filler"/>
         </opt>
         <BNF name="bracket right arrow"/>
      </rhs>
   </BNFdef>
   <BNFdef name="insert edge undirected" predicative="no">
      <rhs>
         <BNF name="tilde left bracket"/>
         <opt>
            <BNF name="insert element pattern filler"/>
         </opt>
         <BNF name="right bracket tilde"/>
      </rhs>
   </BNFdef>
   <BNFdef name="insert element pattern filler" predicative="no">
      <rhs>
         <alt>
            <BNF name="element variable declaration"/>
            <opt>
               <BNF name="label and property set specification"/>
            </opt>
         </alt>
         <alt>
            <opt>
               <BNF name="element variable declaration"/>
            </opt>
            <BNF name="label and property set specification"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="label and property set specification" predicative="no">
      <rhs>
         <alt>
            <BNF name="is or colon"/>
            <BNF name="label set specification"/>
            <opt>
               <BNF name="element property specification"/>
            </opt>
         </alt>
         <alt>
            <opt>
               <BNF name="is or colon"/>
               <BNF name="label set specification"/>
            </opt>
            <BNF name="element property specification"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="path pattern prefix" predicative="no">
      <rhs>
         <alt>
            <BNF name="path mode prefix"/>
         </alt>
         <alt>
            <BNF name="path search prefix"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="path mode prefix" predicative="no">
      <rhs>
         <BNF name="path mode"/>
         <opt>
            <BNF name="path or paths"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="path mode" predicative="no">
      <rhs>
         <alt>
            <kw>WALK</kw>
         </alt>
         <alt>
            <kw>TRAIL</kw>
         </alt>
         <alt>
            <kw>SIMPLE</kw>
         </alt>
         <alt>
            <kw>ACYCLIC</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="path search prefix" predicative="no">
      <rhs>
         <alt>
            <BNF name="all path search"/>
         </alt>
         <alt>
            <BNF name="any path search"/>
         </alt>
         <alt>
            <BNF name="shortest path search"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="all path search" predicative="no">
      <rhs>
         <kw>ALL</kw>
         <opt>
            <BNF name="path mode"/>
         </opt>
         <opt>
            <BNF name="path or paths"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="path or paths" predicative="no">
      <rhs>
         <alt>
            <kw>PATH</kw>
         </alt>
         <alt>
            <kw>PATHS</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="any path search" predicative="no">
      <rhs>
         <kw>ANY</kw>
         <opt>
            <BNF name="number of paths"/>
         </opt>
         <opt>
            <BNF name="path mode"/>
         </opt>
         <opt>
            <BNF name="path or paths"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="number of paths" predicative="no">
      <rhs>
         <BNF name="non-negative integer specification"/>
      </rhs>
   </BNFdef>
   <BNFdef name="shortest path search" predicative="no">
      <rhs>
         <alt>
            <BNF name="all shortest path search"/>
         </alt>
         <alt>
            <BNF name="any shortest path search"/>
         </alt>
         <alt>
            <BNF name="counted shortest path search"/>
         </alt>
         <alt>
            <BNF name="counted shortest group search"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="all shortest path search" predicative="no">
      <rhs>
         <kw>ALL</kw>
         <kw>SHORTEST</kw>
         <opt>
            <BNF name="path mode"/>
         </opt>
         <opt>
            <BNF name="path or paths"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="any shortest path search" predicative="no">
      <rhs>
         <kw>ANY</kw>
         <kw>SHORTEST</kw>
         <opt>
            <BNF name="path mode"/>
         </opt>
         <opt>
            <BNF name="path or paths"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="counted shortest path search" predicative="no">
      <rhs>
         <kw>SHORTEST</kw>
         <BNF name="number of paths"/>
         <opt>
            <BNF name="path mode"/>
         </opt>
         <opt>
            <BNF name="path or paths"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="counted shortest group search" predicative="no">
      <rhs>
         <kw>SHORTEST</kw>
         <opt>
            <BNF name="number of groups"/>
         </opt>
         <opt>
            <BNF name="path mode"/>
         </opt>
         <opt>
            <BNF name="path or paths"/>
         </opt>
         <group>
            <alt>
               <kw>GROUP</kw>
            </alt>
            <alt>
               <kw>GROUPS</kw>
            </alt>
         </group>
      </rhs>
   </BNFdef>
   <BNFdef name="number of groups" predicative="no">
      <rhs>
         <BNF name="non-negative integer specification"/>
      </rhs>
   </BNFdef>
   <BNFdef name="path pattern expression" predicative="no">
      <rhs>
         <alt>
            <BNF name="path term"/>
         </alt>
         <alt>
            <BNF name="path multiset alternation"/>
         </alt>
         <alt>
            <BNF name="path pattern union"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="path multiset alternation" predicative="no">
      <rhs>
         <BNF name="path term"/>
         <BNF name="multiset alternation operator"/>
         <BNF name="path term"/>
         <opt>
            <group>
               <BNF name="multiset alternation operator"/>
               <BNF name="path term"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="path pattern union" predicative="no">
      <rhs>
         <BNF name="path term"/>
         <BNF name="vertical bar"/>
         <BNF name="path term"/>
         <opt>
            <group>
               <BNF name="vertical bar"/>
               <BNF name="path term"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="path term" predicative="no">
      <rhs>
         <alt>
            <BNF name="path factor"/>
         </alt>
         <alt>
            <BNF name="path concatenation"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="path concatenation" predicative="no">
      <rhs>
         <BNF name="path term"/>
         <BNF name="path factor"/>
      </rhs>
   </BNFdef>
   <BNFdef name="path factor" predicative="no">
      <rhs>
         <alt>
            <BNF name="path primary"/>
         </alt>
         <alt>
            <BNF name="quantified path primary"/>
         </alt>
         <alt>
            <BNF name="questioned path primary"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="quantified path primary" predicative="no">
      <rhs>
         <BNF name="path primary"/>
         <BNF name="graph pattern quantifier"/>
      </rhs>
   </BNFdef>
   <BNFdef name="questioned path primary" predicative="no">
      <rhs>
         <BNF name="path primary"/>
         <BNF name="question mark"/>
      </rhs>
   </BNFdef>
   <BNFdef name="path primary" predicative="no">
      <rhs>
         <alt>
            <BNF name="element pattern"/>
         </alt>
         <alt>
            <BNF name="parenthesized path pattern expression"/>
         </alt>
         <alt>
            <BNF name="simplified path pattern expression"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="element pattern" predicative="no">
      <rhs>
         <alt>
            <BNF name="node pattern"/>
         </alt>
         <alt>
            <BNF name="edge pattern"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="node pattern" predicative="no">
      <rhs>
         <BNF name="left paren"/>
         <BNF name="element pattern filler"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="element pattern filler" predicative="no">
      <rhs>
         <opt>
            <BNF name="element variable declaration"/>
         </opt>
         <opt>
            <BNF name="is label expression"/>
         </opt>
         <opt>
            <BNF name="element pattern predicate"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="element variable declaration" predicative="no">
      <rhs>
         <opt>
            <kw>TEMP</kw>
         </opt>
         <BNF name="element variable"/>
      </rhs>
   </BNFdef>
   <BNFdef name="is label expression" predicative="no">
      <rhs>
         <BNF name="is or colon"/>
         <BNF name="label expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="is or colon" predicative="no">
      <rhs>
         <alt>
            <kw>IS</kw>
         </alt>
         <alt>
            <BNF name="colon"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="element pattern predicate" predicative="no">
      <rhs>
         <alt>
            <BNF name="element pattern where clause"/>
         </alt>
         <alt>
            <BNF name="element property specification"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="element pattern where clause" predicative="no">
      <rhs>
         <kw>WHERE</kw>
         <BNF name="search condition"/>
      </rhs>
   </BNFdef>
   <BNFdef name="element property specification" predicative="no">
      <rhs>
         <BNF name="left brace"/>
         <BNF name="property key value pair list"/>
         <BNF name="right brace"/>
      </rhs>
   </BNFdef>
   <BNFdef name="property key value pair list" predicative="no">
      <rhs>
         <BNF name="property key value pair"/>
         <opt>
            <group>
               <BNF name="comma"/>
               <BNF name="property key value pair"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="property key value pair" predicative="no">
      <rhs>
         <BNF name="property name"/>
         <BNF name="colon"/>
         <BNF name="value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="edge pattern" predicative="no">
      <rhs>
         <alt>
            <BNF name="full edge pattern"/>
         </alt>
         <alt>
            <BNF name="abbreviated edge pattern"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="full edge pattern" predicative="no">
      <rhs>
         <alt>
            <BNF name="full edge pointing left"/>
         </alt>
         <alt>
            <BNF name="full edge undirected"/>
         </alt>
         <alt>
            <BNF name="full edge pointing right"/>
         </alt>
         <alt>
            <BNF name="full edge left or undirected"/>
         </alt>
         <alt>
            <BNF name="full edge undirected or right"/>
         </alt>
         <alt>
            <BNF name="full edge left or right"/>
         </alt>
         <alt>
            <BNF name="full edge any direction"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="full edge pointing left" predicative="no">
      <rhs>
         <BNF name="left arrow bracket"/>
         <BNF name="element pattern filler"/>
         <BNF name="right bracket minus"/>
      </rhs>
   </BNFdef>
   <BNFdef name="full edge undirected" predicative="no">
      <rhs>
         <BNF name="tilde left bracket"/>
         <BNF name="element pattern filler"/>
         <BNF name="right bracket tilde"/>
      </rhs>
   </BNFdef>
   <BNFdef name="full edge pointing right" predicative="no">
      <rhs>
         <BNF name="minus left bracket"/>
         <BNF name="element pattern filler"/>
         <BNF name="bracket right arrow"/>
      </rhs>
   </BNFdef>
   <BNFdef name="full edge left or undirected" predicative="no">
      <rhs>
         <BNF name="left arrow tilde bracket"/>
         <BNF name="element pattern filler"/>
         <BNF name="right bracket tilde"/>
      </rhs>
   </BNFdef>
   <BNFdef name="full edge undirected or right" predicative="no">
      <rhs>
         <BNF name="tilde left bracket"/>
         <BNF name="element pattern filler"/>
         <BNF name="bracket tilde right arrow"/>
      </rhs>
   </BNFdef>
   <BNFdef name="full edge left or right" predicative="no">
      <rhs>
         <BNF name="left arrow bracket"/>
         <BNF name="element pattern filler"/>
         <BNF name="bracket right arrow"/>
      </rhs>
   </BNFdef>
   <BNFdef name="full edge any direction" predicative="no">
      <rhs>
         <BNF name="minus left bracket"/>
         <BNF name="element pattern filler"/>
         <BNF name="right bracket minus"/>
      </rhs>
   </BNFdef>
   <BNFdef name="abbreviated edge pattern" predicative="no">
      <rhs>
         <alt>
            <BNF name="left arrow"/>
         </alt>
         <alt>
            <BNF name="tilde"/>
         </alt>
         <alt>
            <BNF name="right arrow"/>
         </alt>
         <alt>
            <BNF name="left arrow tilde"/>
         </alt>
         <alt>
            <BNF name="tilde right arrow"/>
         </alt>
         <alt>
            <BNF name="left minus right"/>
         </alt>
         <alt>
            <BNF name="minus sign"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="parenthesized path pattern expression" predicative="no">
      <rhs>
         <BNF name="left paren"/>
         <opt>
            <BNF name="subpath variable declaration"/>
         </opt>
         <opt>
            <BNF name="path mode prefix"/>
         </opt>
         <BNF name="path pattern expression"/>
         <opt>
            <BNF name="parenthesized path pattern where clause"/>
         </opt>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="subpath variable declaration" predicative="no">
      <rhs>
         <BNF name="subpath variable"/>
         <BNF name="equals operator"/>
      </rhs>
   </BNFdef>
   <BNFdef name="parenthesized path pattern where clause" predicative="no">
      <rhs>
         <kw>WHERE</kw>
         <BNF name="search condition"/>
      </rhs>
   </BNFdef>
   <BNFdef name="label expression" predicative="no">
      <rhs>
         <alt>
            <BNF name="label term"/>
         </alt>
         <alt>
            <BNF name="label disjunction"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="label disjunction" predicative="no">
      <rhs>
         <BNF name="label expression"/>
         <BNF name="vertical bar"/>
         <BNF name="label term"/>
      </rhs>
   </BNFdef>
   <BNFdef name="label term" predicative="no">
      <rhs>
         <alt>
            <BNF name="label factor"/>
         </alt>
         <alt>
            <BNF name="label conjunction"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="label conjunction" predicative="no">
      <rhs>
         <BNF name="label term"/>
         <BNF name="ampersand"/>
         <BNF name="label factor"/>
      </rhs>
   </BNFdef>
   <BNFdef name="label factor" predicative="no">
      <rhs>
         <alt>
            <BNF name="label primary"/>
         </alt>
         <alt>
            <BNF name="label negation"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="label negation" predicative="no">
      <rhs>
         <BNF name="exclamation mark"/>
         <BNF name="label primary"/>
      </rhs>
   </BNFdef>
   <BNFdef name="label primary" predicative="no">
      <rhs>
         <alt>
            <BNF name="label name"/>
         </alt>
         <alt>
            <BNF name="wildcard label"/>
         </alt>
         <alt>
            <BNF name="parenthesized label expression"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="wildcard label" predicative="no">
      <rhs>
         <BNF name="percent"/>
      </rhs>
   </BNFdef>
   <BNFdef name="parenthesized label expression" predicative="no">
      <rhs>
         <BNF name="left paren"/>
         <BNF name="label expression"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="path variable reference" predicative="no">
      <rhs>
         <BNF name="binding variable reference"/>
      </rhs>
   </BNFdef>
   <BNFdef name="element variable reference" predicative="no">
      <rhs>
         <BNF name="binding variable reference"/>
      </rhs>
   </BNFdef>
   <BNFdef name="graph pattern quantifier" predicative="no">
      <rhs>
         <alt>
            <BNF name="asterisk"/>
         </alt>
         <alt>
            <BNF name="plus sign"/>
         </alt>
         <alt>
            <BNF name="fixed quantifier"/>
         </alt>
         <alt>
            <BNF name="general quantifier"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="fixed quantifier" predicative="no">
      <rhs>
         <BNF name="left brace"/>
         <BNF name="unsigned integer"/>
         <BNF name="right brace"/>
      </rhs>
   </BNFdef>
   <BNFdef name="general quantifier" predicative="no">
      <rhs>
         <BNF name="left brace"/>
         <opt>
            <BNF name="lower bound"/>
         </opt>
         <BNF name="comma"/>
         <opt>
            <BNF name="upper bound"/>
         </opt>
         <BNF name="right brace"/>
      </rhs>
   </BNFdef>
   <BNFdef name="lower bound" predicative="no">
      <rhs>
         <BNF name="unsigned integer"/>
      </rhs>
   </BNFdef>
   <BNFdef name="upper bound" predicative="no">
      <rhs>
         <BNF name="unsigned integer"/>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified path pattern expression" predicative="no">
      <rhs>
         <alt>
            <BNF name="simplified defaulting left"/>
         </alt>
         <alt>
            <BNF name="simplified defaulting undirected"/>
         </alt>
         <alt>
            <BNF name="simplified defaulting right"/>
         </alt>
         <alt>
            <BNF name="simplified defaulting left or undirected"/>
         </alt>
         <alt>
            <BNF name="simplified defaulting undirected or right"/>
         </alt>
         <alt>
            <BNF name="simplified defaulting left or right"/>
         </alt>
         <alt>
            <BNF name="simplified defaulting any direction"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified defaulting left" predicative="no">
      <rhs>
         <BNF name="left minus slash"/>
         <BNF name="simplified contents"/>
         <BNF name="slash minus"/>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified defaulting undirected" predicative="no">
      <rhs>
         <BNF name="tilde slash"/>
         <BNF name="simplified contents"/>
         <BNF name="slash tilde"/>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified defaulting right" predicative="no">
      <rhs>
         <BNF name="minus slash"/>
         <BNF name="simplified contents"/>
         <BNF name="slash minus right"/>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified defaulting left or undirected" predicative="no">
      <rhs>
         <BNF name="left tilde slash"/>
         <BNF name="simplified contents"/>
         <BNF name="slash tilde"/>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified defaulting undirected or right" predicative="no">
      <rhs>
         <BNF name="tilde slash"/>
         <BNF name="simplified contents"/>
         <BNF name="slash tilde right"/>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified defaulting left or right" predicative="no">
      <rhs>
         <BNF name="left minus slash"/>
         <BNF name="simplified contents"/>
         <BNF name="slash minus right"/>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified defaulting any direction" predicative="no">
      <rhs>
         <BNF name="minus slash"/>
         <BNF name="simplified contents"/>
         <BNF name="slash minus"/>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified contents" predicative="no">
      <rhs>
         <alt>
            <BNF name="simplified term"/>
         </alt>
         <alt>
            <BNF name="simplified path union"/>
         </alt>
         <alt>
            <BNF name="simplified multiset alternation"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified path union" predicative="no">
      <rhs>
         <BNF name="simplified term"/>
         <BNF name="vertical bar"/>
         <BNF name="simplified term"/>
         <opt>
            <group>
               <BNF name="vertical bar"/>
               <BNF name="simplified term"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified multiset alternation" predicative="no">
      <rhs>
         <BNF name="simplified term"/>
         <BNF name="multiset alternation operator"/>
         <BNF name="simplified term"/>
         <opt>
            <group>
               <BNF name="multiset alternation operator"/>
               <BNF name="simplified term"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified term" predicative="no">
      <rhs>
         <alt>
            <BNF name="simplified factor low"/>
         </alt>
         <alt>
            <BNF name="simplified concatenation"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified concatenation" predicative="no">
      <rhs>
         <BNF name="simplified term"/>
         <BNF name="simplified factor low"/>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified factor low" predicative="no">
      <rhs>
         <alt>
            <BNF name="simplified factor high"/>
         </alt>
         <alt>
            <BNF name="simplified conjunction"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified conjunction" predicative="no">
      <rhs>
         <BNF name="simplified factor low"/>
         <BNF name="ampersand"/>
         <BNF name="simplified factor high"/>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified factor high" predicative="no">
      <rhs>
         <alt>
            <BNF name="simplified tertiary"/>
         </alt>
         <alt>
            <BNF name="simplified quantified"/>
         </alt>
         <alt>
            <BNF name="simplified questioned"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified quantified" predicative="no">
      <rhs>
         <BNF name="simplified tertiary"/>
         <BNF name="graph pattern quantifier"/>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified questioned" predicative="no">
      <rhs>
         <BNF name="simplified tertiary"/>
         <BNF name="question mark"/>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified tertiary" predicative="no">
      <rhs>
         <alt>
            <BNF name="simplified direction override"/>
         </alt>
         <alt>
            <BNF name="simplified secondary"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified direction override" predicative="no">
      <rhs>
         <alt>
            <BNF name="simplified override left"/>
         </alt>
         <alt>
            <BNF name="simplified override undirected"/>
         </alt>
         <alt>
            <BNF name="simplified override right"/>
         </alt>
         <alt>
            <BNF name="simplified override left or undirected"/>
         </alt>
         <alt>
            <BNF name="simplified override undirected or right"/>
         </alt>
         <alt>
            <BNF name="simplified override left or right"/>
         </alt>
         <alt>
            <BNF name="simplified override any direction"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified override left" predicative="no">
      <rhs>
         <BNF name="left angle bracket"/>
         <BNF name="simplified secondary"/>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified override undirected" predicative="no">
      <rhs>
         <BNF name="tilde"/>
         <BNF name="simplified secondary"/>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified override right" predicative="no">
      <rhs>
         <BNF name="simplified secondary"/>
         <BNF name="right angle bracket"/>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified override left or undirected" predicative="no">
      <rhs>
         <BNF name="left arrow tilde"/>
         <BNF name="simplified secondary"/>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified override undirected or right" predicative="no">
      <rhs>
         <BNF name="tilde"/>
         <BNF name="simplified secondary"/>
         <BNF name="right angle bracket"/>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified override left or right" predicative="no">
      <rhs>
         <BNF name="left angle bracket"/>
         <BNF name="simplified secondary"/>
         <BNF name="right angle bracket"/>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified override any direction" predicative="no">
      <rhs>
         <BNF name="minus sign"/>
         <BNF name="simplified secondary"/>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified secondary" predicative="no">
      <rhs>
         <alt>
            <BNF name="simplified primary"/>
         </alt>
         <alt>
            <BNF name="simplified negation"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified negation" predicative="no">
      <rhs>
         <BNF name="exclamation mark"/>
         <BNF name="simplified primary"/>
      </rhs>
   </BNFdef>
   <BNFdef name="simplified primary" predicative="no">
      <rhs>
         <alt>
            <BNF name="label name"/>
         </alt>
         <alt>
            <BNF name="left paren"/>
            <BNF name="simplified contents"/>
            <BNF name="right paren"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="where clause" predicative="no">
      <rhs>
         <kw>WHERE</kw>
         <BNF name="search condition"/>
      </rhs>
   </BNFdef>
   <BNFdef name="yield clause" predicative="no">
      <rhs>
         <kw>YIELD</kw>
         <BNF name="yield item list"/>
      </rhs>
   </BNFdef>
   <BNFdef name="yield item list" predicative="no">
      <rhs>
         <BNF name="yield item"/>
         <opt>
            <group>
               <BNF name="comma"/>
               <BNF name="yield item"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="yield item" predicative="no">
      <rhs>
         <group>
            <BNF name="yield item name"/>
            <opt>
               <BNF name="yield item alias"/>
            </opt>
         </group>
      </rhs>
   </BNFdef>
   <BNFdef name="yield item name" predicative="no">
      <rhs>
         <BNF name="field name"/>
      </rhs>
   </BNFdef>
   <BNFdef name="yield item alias" predicative="no">
      <rhs>
         <kw>AS</kw>
         <BNF name="binding variable"/>
      </rhs>
   </BNFdef>
   <BNFdef name="group by clause" predicative="no">
      <rhs>
         <kw>GROUP</kw>
         <kw>BY</kw>
         <BNF name="grouping element list"/>
      </rhs>
   </BNFdef>
   <BNFdef name="grouping element list" predicative="no">
      <rhs>
         <alt>
            <BNF name="grouping element"/>
            <opt>
               <group>
                  <BNF name="comma"/>
                  <BNF name="grouping element"/>
               </group>
               <repeat/>
            </opt>
         </alt>
         <alt>
            <BNF name="empty grouping set"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="grouping element" predicative="no">
      <rhs>
         <BNF name="binding variable reference"/>
      </rhs>
   </BNFdef>
   <BNFdef name="empty grouping set" predicative="no">
      <rhs>
         <BNF name="left paren"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="order by clause" predicative="no">
      <rhs>
         <kw>ORDER</kw>
         <kw>BY</kw>
         <BNF name="sort specification list"/>
      </rhs>
   </BNFdef>
   <BNFdef name="sort specification list" predicative="no">
      <rhs>
         <BNF name="sort specification"/>
         <opt>
            <group>
               <BNF name="comma"/>
               <BNF name="sort specification"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="sort specification" predicative="no">
      <rhs>
         <BNF name="sort key"/>
         <opt>
            <BNF name="ordering specification"/>
         </opt>
         <opt>
            <BNF name="null ordering"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="sort key" predicative="no">
      <rhs>
         <BNF name="aggregating value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="ordering specification" predicative="no">
      <rhs>
         <alt>
            <kw>ASC</kw>
         </alt>
         <alt>
            <kw>ASCENDING</kw>
         </alt>
         <alt>
            <kw>DESC</kw>
         </alt>
         <alt>
            <kw>DESCENDING</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="null ordering" predicative="no">
      <rhs>
         <alt>
            <kw>NULLS</kw>
            <kw>FIRST</kw>
         </alt>
         <alt>
            <kw>NULLS</kw>
            <kw>LAST</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="limit clause" predicative="no">
      <rhs>
         <kw>LIMIT</kw>
         <BNF name="non-negative integer specification"/>
      </rhs>
   </BNFdef>
   <BNFdef name="offset clause" predicative="no">
      <rhs>
         <BNF name="offset synonym"/>
         <BNF name="non-negative integer specification"/>
      </rhs>
   </BNFdef>
   <BNFdef name="offset synonym" predicative="no">
      <rhs>
         <alt>
            <kw>OFFSET</kw>
         </alt>
         <alt>
            <kw>SKIP</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="schema reference" predicative="no">
      <rhs>
         <alt>
            <BNF name="absolute catalog schema reference"/>
         </alt>
         <alt>
            <BNF name="relative catalog schema reference"/>
         </alt>
         <alt>
            <BNF name="reference parameter specification"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="absolute catalog schema reference" predicative="no">
      <rhs>
         <alt>
            <BNF name="solidus"/>
         </alt>
         <alt>
            <BNF name="absolute directory path"/>
            <BNF name="schema name"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="catalog schema parent and name" predicative="no">
      <rhs>
         <BNF name="absolute directory path"/>
         <BNF name="schema name"/>
      </rhs>
   </BNFdef>
   <BNFdef name="relative catalog schema reference" predicative="no">
      <rhs>
         <alt>
            <BNF name="predefined schema reference"/>
         </alt>
         <alt>
            <BNF name="relative directory path"/>
            <BNF name="schema name"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="predefined schema reference" predicative="no">
      <rhs>
         <alt>
            <kw>HOME_SCHEMA</kw>
         </alt>
         <alt>
            <kw>CURRENT_SCHEMA</kw>
         </alt>
         <alt>
            <BNF name="period"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="absolute directory path" predicative="no">
      <rhs>
         <BNF name="solidus"/>
         <opt>
            <BNF name="simple directory path"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="relative directory path" predicative="no">
      <rhs>
         <BNF name="double period"/>
         <opt>
            <group>
               <BNF name="solidus"/>
               <BNF name="double period"/>
            </group>
            <repeat/>
            <BNF name="solidus"/>
            <opt>
               <BNF name="simple directory path"/>
            </opt>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="simple directory path" predicative="no">
      <rhs>
         <group>
            <BNF name="directory name"/>
            <BNF name="solidus"/>
         </group>
         <repeat/>
      </rhs>
   </BNFdef>
   <BNFdef name="graph reference" predicative="no">
      <rhs>
         <alt>
            <BNF name="catalog object parent reference"/>
            <BNF name="graph name"/>
         </alt>
         <alt>
            <BNF name="delimited graph name"/>
         </alt>
         <alt>
            <BNF name="home graph"/>
         </alt>
         <alt>
            <BNF name="reference parameter specification"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="catalog graph parent and name" predicative="no">
      <rhs>
         <opt>
            <BNF name="catalog object parent reference"/>
         </opt>
         <BNF name="graph name"/>
      </rhs>
   </BNFdef>
   <BNFdef name="home graph" predicative="no">
      <rhs>
         <alt>
            <kw>HOME_PROPERTY_GRAPH</kw>
         </alt>
         <alt>
            <kw>HOME_GRAPH</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="graph type reference" predicative="no">
      <rhs>
         <alt>
            <BNF name="catalog graph type parent and name"/>
         </alt>
         <alt>
            <BNF name="reference parameter specification"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="catalog graph type parent and name" predicative="no">
      <rhs>
         <opt>
            <BNF name="catalog object parent reference"/>
         </opt>
         <BNF name="graph type name"/>
      </rhs>
   </BNFdef>
   <BNFdef name="binding table reference" predicative="no">
      <rhs>
         <alt>
            <BNF name="catalog object parent reference"/>
            <BNF name="binding table name"/>
         </alt>
         <alt>
            <BNF name="delimited binding table name"/>
         </alt>
         <alt>
            <BNF name="reference parameter specification"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="catalog binding table parent and name" predicative="no">
      <rhs>
         <opt>
            <BNF name="catalog object parent reference"/>
         </opt>
         <BNF name="binding table name"/>
      </rhs>
   </BNFdef>
   <BNFdef name="procedure reference" predicative="no">
      <rhs>
         <alt>
            <BNF name="catalog procedure parent and name"/>
         </alt>
         <alt>
            <BNF name="reference parameter specification"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="catalog procedure parent and name" predicative="no">
      <rhs>
         <opt>
            <BNF name="catalog object parent reference"/>
         </opt>
         <BNF name="procedure name"/>
      </rhs>
   </BNFdef>
   <BNFdef name="catalog object parent reference" predicative="no">
      <rhs>
         <alt>
            <BNF name="schema reference"/>
            <opt>
               <BNF name="solidus"/>
            </opt>
            <opt>
               <group>
                  <BNF name="object name"/>
                  <BNF name="period"/>
               </group>
               <repeat/>
            </opt>
         </alt>
         <alt>
            <group>
               <BNF name="object name"/>
               <BNF name="period"/>
            </group>
            <repeat/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="reference parameter specification" predicative="no">
      <rhs>
         <BNF name="substituted parameter reference"/>
      </rhs>
   </BNFdef>
   <BNFdef name="external object reference" predicative="no">
      <rhs>
         <seeTheRules/>
      </rhs>
   </BNFdef>
   <BNFdef name="nested graph type specification" predicative="no">
      <rhs>
         <BNF name="left brace"/>
         <BNF name="graph type specification body"/>
         <BNF name="right brace"/>
      </rhs>
   </BNFdef>
   <BNFdef name="graph type specification body" predicative="no">
      <rhs>
         <BNF name="element type list"/>
      </rhs>
   </BNFdef>
   <BNFdef name="element type list" predicative="no">
      <rhs>
         <BNF name="element type specification"/>
         <opt>
            <group>
               <BNF name="comma"/>
               <BNF name="element type specification"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="element type specification" predicative="no">
      <rhs>
         <alt>
            <BNF name="node type specification"/>
         </alt>
         <alt>
            <BNF name="edge type specification"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="node type specification" predicative="no">
      <rhs>
         <alt>
            <BNF name="node type pattern"/>
         </alt>
         <alt>
            <BNF name="node type phrase"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="node type pattern" predicative="no">
      <rhs>
         <opt>
            <BNF name="node synonym"/>
            <opt>
               <kw>TYPE</kw>
            </opt>
            <BNF name="node type name"/>
         </opt>
         <BNF name="left paren"/>
         <opt>
            <BNF name="local node type alias"/>
         </opt>
         <opt>
            <BNF name="node type filler"/>
         </opt>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="node type phrase" predicative="no">
      <rhs>
         <BNF name="node synonym"/>
         <opt>
            <kw>TYPE</kw>
         </opt>
         <BNF name="node type phrase filler"/>
         <opt>
            <kw>AS</kw>
            <BNF name="local node type alias"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="node type phrase filler" predicative="no">
      <rhs>
         <alt>
            <BNF name="node type name"/>
            <opt>
               <BNF name="node type filler"/>
            </opt>
         </alt>
         <alt>
            <BNF name="node type filler"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="node type filler" predicative="no">
      <rhs>
         <alt>
            <BNF name="node type key label set"/>
            <opt>
               <BNF name="node type implied content"/>
            </opt>
         </alt>
         <alt>
            <BNF name="node type implied content"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="local node type alias" predicative="no">
      <rhs>
         <BNF name="regular identifier"/>
      </rhs>
   </BNFdef>
   <BNFdef name="node type implied content" predicative="no">
      <rhs>
         <alt>
            <BNF name="node type label set"/>
         </alt>
         <alt>
            <BNF name="node type property types"/>
         </alt>
         <alt>
            <BNF name="node type label set"/>
            <BNF name="node type property types"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="node type key label set" predicative="no">
      <rhs>
         <opt>
            <BNF name="label set phrase"/>
         </opt>
         <BNF name="implies"/>
      </rhs>
   </BNFdef>
   <BNFdef name="node type label set" predicative="no">
      <rhs>
         <BNF name="label set phrase"/>
      </rhs>
   </BNFdef>
   <BNFdef name="node type property types" predicative="no">
      <rhs>
         <BNF name="property types specification"/>
      </rhs>
   </BNFdef>
   <BNFdef name="edge type specification" predicative="no">
      <rhs>
         <alt>
            <BNF name="edge type pattern"/>
         </alt>
         <alt>
            <BNF name="edge type phrase"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="edge type pattern" predicative="no">
      <rhs>
         <opt>
            <opt>
               <BNF name="edge kind"/>
            </opt>
            <BNF name="edge synonym"/>
            <opt>
               <kw>TYPE</kw>
            </opt>
            <BNF name="edge type name"/>
         </opt>
         <group>
            <alt>
               <BNF name="edge type pattern directed"/>
            </alt>
            <alt>
               <BNF name="edge type pattern undirected"/>
            </alt>
         </group>
      </rhs>
   </BNFdef>
   <BNFdef name="edge type phrase" predicative="no">
      <rhs>
         <BNF name="edge kind"/>
         <BNF name="edge synonym"/>
         <opt>
            <kw>TYPE</kw>
         </opt>
         <BNF name="edge type phrase filler"/>
         <BNF name="endpoint pair phrase"/>
      </rhs>
   </BNFdef>
   <BNFdef name="edge type phrase filler" predicative="no">
      <rhs>
         <alt>
            <BNF name="edge type name"/>
            <opt>
               <BNF name="edge type filler"/>
            </opt>
         </alt>
         <alt>
            <BNF name="edge type filler"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="edge type filler" predicative="no">
      <rhs>
         <alt>
            <BNF name="edge type key label set"/>
            <opt>
               <BNF name="edge type implied content"/>
            </opt>
         </alt>
         <alt>
            <BNF name="edge type implied content"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="edge type implied content" predicative="no">
      <rhs>
         <alt>
            <BNF name="edge type label set"/>
         </alt>
         <alt>
            <BNF name="edge type property types"/>
         </alt>
         <alt>
            <BNF name="edge type label set"/>
            <BNF name="edge type property types"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="edge type key label set" predicative="no">
      <rhs>
         <opt>
            <BNF name="label set phrase"/>
         </opt>
         <BNF name="implies"/>
      </rhs>
   </BNFdef>
   <BNFdef name="edge type label set" predicative="no">
      <rhs>
         <BNF name="label set phrase"/>
      </rhs>
   </BNFdef>
   <BNFdef name="edge type property types" predicative="no">
      <rhs>
         <BNF name="property types specification"/>
      </rhs>
   </BNFdef>
   <BNFdef name="edge type pattern directed" predicative="no">
      <rhs>
         <alt>
            <BNF name="edge type pattern pointing right"/>
         </alt>
         <alt>
            <BNF name="edge type pattern pointing left"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="edge type pattern pointing right" predicative="no">
      <rhs>
         <BNF name="source node type reference"/>
         <BNF name="arc type pointing right"/>
         <BNF name="destination node type reference"/>
      </rhs>
   </BNFdef>
   <BNFdef name="edge type pattern pointing left" predicative="no">
      <rhs>
         <BNF name="destination node type reference"/>
         <BNF name="arc type pointing left"/>
         <BNF name="source node type reference"/>
      </rhs>
   </BNFdef>
   <BNFdef name="edge type pattern undirected" predicative="no">
      <rhs>
         <BNF name="source node type reference"/>
         <BNF name="arc type undirected"/>
         <BNF name="destination node type reference"/>
      </rhs>
   </BNFdef>
   <BNFdef name="arc type pointing right" predicative="no">
      <rhs>
         <BNF name="minus left bracket"/>
         <BNF name="edge type filler"/>
         <BNF name="bracket right arrow"/>
      </rhs>
   </BNFdef>
   <BNFdef name="arc type pointing left" predicative="no">
      <rhs>
         <BNF name="left arrow bracket"/>
         <BNF name="edge type filler"/>
         <BNF name="right bracket minus"/>
      </rhs>
   </BNFdef>
   <BNFdef name="arc type undirected" predicative="no">
      <rhs>
         <BNF name="tilde left bracket"/>
         <BNF name="edge type filler"/>
         <BNF name="right bracket tilde"/>
      </rhs>
   </BNFdef>
   <BNFdef name="source node type reference" predicative="no">
      <rhs>
         <alt>
            <BNF name="left paren"/>
            <BNF name="source node type alias"/>
            <BNF name="right paren"/>
         </alt>
         <alt>
            <BNF name="left paren"/>
            <opt>
               <BNF name="node type filler"/>
            </opt>
            <BNF name="right paren"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="destination node type reference" predicative="no">
      <rhs>
         <alt>
            <BNF name="left paren"/>
            <BNF name="destination node type alias"/>
            <BNF name="right paren"/>
         </alt>
         <alt>
            <BNF name="left paren"/>
            <opt>
               <BNF name="node type filler"/>
            </opt>
            <BNF name="right paren"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="edge kind" predicative="no">
      <rhs>
         <alt>
            <kw>DIRECTED</kw>
         </alt>
         <alt>
            <kw>UNDIRECTED</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="endpoint pair phrase" predicative="no">
      <rhs>
         <kw>CONNECTING</kw>
         <BNF name="endpoint pair"/>
      </rhs>
   </BNFdef>
   <BNFdef name="endpoint pair" predicative="no">
      <rhs>
         <alt>
            <BNF name="endpoint pair directed"/>
         </alt>
         <alt>
            <BNF name="endpoint pair undirected"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="endpoint pair directed" predicative="no">
      <rhs>
         <alt>
            <BNF name="endpoint pair pointing right"/>
         </alt>
         <alt>
            <BNF name="endpoint pair pointing left"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="endpoint pair pointing right" predicative="no">
      <rhs>
         <BNF name="left paren"/>
         <BNF name="source node type alias"/>
         <BNF name="connector pointing right"/>
         <BNF name="destination node type alias"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="endpoint pair pointing left" predicative="no">
      <rhs>
         <BNF name="left paren"/>
         <BNF name="destination node type alias"/>
         <BNF name="left arrow"/>
         <BNF name="source node type alias"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="endpoint pair undirected" predicative="no">
      <rhs>
         <BNF name="left paren"/>
         <BNF name="source node type alias"/>
         <BNF name="connector undirected"/>
         <BNF name="destination node type alias"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="connector pointing right" predicative="no">
      <rhs>
         <alt>
            <kw>TO</kw>
         </alt>
         <alt>
            <BNF name="right arrow"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="connector undirected" predicative="no">
      <rhs>
         <alt>
            <kw>TO</kw>
         </alt>
         <alt>
            <BNF name="tilde"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="source node type alias" predicative="no">
      <rhs>
         <BNF name="regular identifier"/>
      </rhs>
   </BNFdef>
   <BNFdef name="destination node type alias" predicative="no">
      <rhs>
         <BNF name="regular identifier"/>
      </rhs>
   </BNFdef>
   <BNFdef name="label set phrase" predicative="no">
      <rhs>
         <alt>
            <kw>LABEL</kw>
            <BNF name="label name"/>
         </alt>
         <alt>
            <kw>LABELS</kw>
            <BNF name="label set specification"/>
         </alt>
         <alt>
            <BNF name="is or colon"/>
            <BNF name="label set specification"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="label set specification" predicative="no">
      <rhs>
         <BNF name="label name"/>
         <opt>
            <group>
               <BNF name="ampersand"/>
               <BNF name="label name"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="property types specification" predicative="no">
      <rhs>
         <BNF name="left brace"/>
         <opt>
            <BNF name="property type list"/>
         </opt>
         <BNF name="right brace"/>
      </rhs>
   </BNFdef>
   <BNFdef name="property type list" predicative="no">
      <rhs>
         <BNF name="property type"/>
         <opt>
            <group>
               <BNF name="comma"/>
               <BNF name="property type"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="property type" predicative="no">
      <rhs>
         <BNF name="property name"/>
         <opt>
            <BNF name="typed"/>
         </opt>
         <BNF name="property value type"/>
      </rhs>
   </BNFdef>
   <BNFdef name="property value type" predicative="no">
      <rhs>
         <BNF name="value type"/>
      </rhs>
   </BNFdef>
   <BNFdef name="binding table type" predicative="no">
      <rhs>
         <opt>
            <kw>BINDING</kw>
         </opt>
         <kw>TABLE</kw>
         <BNF name="field types specification"/>
      </rhs>
   </BNFdef>
   <BNFdef name="value type" predicative="no">
      <rhs>
         <alt>
            <BNF name="predefined type"/>
         </alt>
         <alt>
            <BNF name="constructed value type"/>
         </alt>
         <alt>
            <BNF name="dynamic union type"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="typed" predicative="no">
      <rhs>
         <alt>
            <BNF name="double colon"/>
         </alt>
         <alt>
            <kw>TYPED</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="predefined type" predicative="no">
      <rhs>
         <alt>
            <BNF name="boolean type"/>
         </alt>
         <alt>
            <BNF name="character string type"/>
         </alt>
         <alt>
            <BNF name="byte string type"/>
         </alt>
         <alt>
            <BNF name="numeric type"/>
         </alt>
         <alt>
            <BNF name="temporal type"/>
         </alt>
         <alt>
            <BNF name="reference value type"/>
         </alt>
         <alt>
            <BNF name="immaterial value type"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="boolean type" predicative="no">
      <rhs>
         <group>
            <alt>
               <kw>BOOL</kw>
            </alt>
            <alt>
               <kw>BOOLEAN</kw>
            </alt>
         </group>
         <opt>
            <BNF name="not null"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="character string type" predicative="no">
      <rhs>
         <alt>
            <kw>STRING</kw>
            <opt>
               <BNF name="left paren"/>
               <opt>
                  <BNF name="min length"/>
                  <BNF name="comma"/>
               </opt>
               <BNF name="max length"/>
               <BNF name="right paren"/>
            </opt>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>CHAR</kw>
            <opt>
               <BNF name="left paren"/>
               <BNF name="fixed length"/>
               <BNF name="right paren"/>
            </opt>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>VARCHAR</kw>
            <opt>
               <BNF name="left paren"/>
               <BNF name="max length"/>
               <BNF name="right paren"/>
            </opt>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="byte string type" predicative="no">
      <rhs>
         <alt>
            <kw>BYTES</kw>
            <opt>
               <BNF name="left paren"/>
               <opt>
                  <BNF name="min length"/>
                  <BNF name="comma"/>
               </opt>
               <BNF name="max length"/>
               <BNF name="right paren"/>
            </opt>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>BINARY</kw>
            <opt>
               <BNF name="left paren"/>
               <BNF name="fixed length"/>
               <BNF name="right paren"/>
            </opt>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>VARBINARY</kw>
            <opt>
               <BNF name="left paren"/>
               <BNF name="max length"/>
               <BNF name="right paren"/>
            </opt>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="min length" predicative="no">
      <rhs>
         <BNF name="unsigned integer"/>
      </rhs>
   </BNFdef>
   <BNFdef name="max length" predicative="no">
      <rhs>
         <BNF name="unsigned integer"/>
      </rhs>
   </BNFdef>
   <BNFdef name="fixed length" predicative="no">
      <rhs>
         <BNF name="unsigned integer"/>
      </rhs>
   </BNFdef>
   <BNFdef name="numeric type" predicative="no">
      <rhs>
         <alt>
            <BNF name="exact numeric type"/>
         </alt>
         <alt>
            <BNF name="approximate numeric type"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="exact numeric type" predicative="no">
      <rhs>
         <alt>
            <BNF name="binary exact numeric type"/>
         </alt>
         <alt>
            <BNF name="decimal exact numeric type"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="binary exact numeric type" predicative="no">
      <rhs>
         <alt>
            <BNF name="signed binary exact numeric type"/>
         </alt>
         <alt>
            <BNF name="unsigned binary exact numeric type"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="signed binary exact numeric type" predicative="no">
      <rhs>
         <alt>
            <kw>INT8</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>INT16</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>INT32</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>INT64</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>INT128</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>INT256</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>SMALLINT</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>INT</kw>
            <opt>
               <BNF name="left paren"/>
               <BNF name="precision"/>
               <BNF name="right paren"/>
            </opt>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>BIGINT</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <opt>
               <kw>SIGNED</kw>
            </opt>
            <BNF name="verbose binary exact numeric type"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="unsigned binary exact numeric type" predicative="no">
      <rhs>
         <alt>
            <kw>UINT8</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>UINT16</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>UINT32</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>UINT64</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>UINT128</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>UINT256</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>USMALLINT</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>UINT</kw>
            <opt>
               <BNF name="left paren"/>
               <BNF name="precision"/>
               <BNF name="right paren"/>
            </opt>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>UBIGINT</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>UNSIGNED</kw>
            <BNF name="verbose binary exact numeric type"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="verbose binary exact numeric type" predicative="no">
      <rhs>
         <alt>
            <kw>INTEGER8</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>INTEGER16</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>INTEGER32</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>INTEGER64</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>INTEGER128</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>INTEGER256</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>SMALL</kw>
            <kw>INTEGER</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>INTEGER</kw>
            <opt>
               <BNF name="left paren"/>
               <BNF name="precision"/>
               <BNF name="right paren"/>
            </opt>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>BIG</kw>
            <kw>INTEGER</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="decimal exact numeric type" predicative="no">
      <rhs>
         <group>
            <alt>
               <kw>DECIMAL</kw>
            </alt>
            <alt>
               <kw>DEC</kw>
            </alt>
         </group>
         <opt>
            <BNF name="left paren"/>
            <BNF name="precision"/>
            <opt>
               <BNF name="comma"/>
               <BNF name="scale"/>
            </opt>
            <BNF name="right paren"/>
            <opt>
               <BNF name="not null"/>
            </opt>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="precision" predicative="no">
      <rhs>
         <BNF name="unsigned decimal integer"/>
      </rhs>
   </BNFdef>
   <BNFdef name="scale" predicative="no">
      <rhs>
         <BNF name="unsigned decimal integer"/>
      </rhs>
   </BNFdef>
   <BNFdef name="approximate numeric type" predicative="no">
      <rhs>
         <alt>
            <kw>FLOAT16</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>FLOAT32</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>FLOAT64</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>FLOAT128</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>FLOAT256</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>FLOAT</kw>
            <opt>
               <BNF name="left paren"/>
               <BNF name="precision"/>
               <opt>
                  <BNF name="comma"/>
                  <BNF name="scale"/>
               </opt>
               <BNF name="right paren"/>
            </opt>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>REAL</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>DOUBLE</kw>
            <opt>
               <kw>PRECISION</kw>
            </opt>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="temporal type" predicative="no">
      <rhs>
         <alt>
            <BNF name="temporal instant type"/>
         </alt>
         <alt>
            <BNF name="temporal duration type"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="temporal instant type" predicative="no">
      <rhs>
         <alt>
            <BNF name="datetime type"/>
         </alt>
         <alt>
            <BNF name="localdatetime type"/>
         </alt>
         <alt>
            <BNF name="date type"/>
         </alt>
         <alt>
            <BNF name="time type"/>
         </alt>
         <alt>
            <BNF name="localtime type"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="datetime type" predicative="no">
      <rhs>
         <alt>
            <kw>ZONED</kw>
            <kw>DATETIME</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>TIMESTAMP</kw>
            <kw>WITH</kw>
            <kw>TIME</kw>
            <kw>ZONE</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="localdatetime type" predicative="no">
      <rhs>
         <alt>
            <kw>LOCAL</kw>
            <kw>DATETIME</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>TIMESTAMP</kw>
            <opt>
               <kw>WITHOUT</kw>
               <kw>TIME</kw>
               <kw>ZONE</kw>
            </opt>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="date type" predicative="no">
      <rhs>
         <kw>DATE</kw>
         <opt>
            <BNF name="not null"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="time type" predicative="no">
      <rhs>
         <alt>
            <kw>ZONED</kw>
            <kw>TIME</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>TIME</kw>
            <kw>WITH</kw>
            <kw>TIME</kw>
            <kw>ZONE</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="localtime type" predicative="no">
      <rhs>
         <alt>
            <kw>LOCAL</kw>
            <kw>TIME</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <kw>TIME</kw>
            <kw>WITHOUT</kw>
            <kw>TIME</kw>
            <kw>ZONE</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="temporal duration type" predicative="no">
      <rhs>
         <kw>DURATION</kw>
         <BNF name="left paren"/>
         <BNF name="temporal duration qualifier"/>
         <BNF name="right paren"/>
         <opt>
            <BNF name="not null"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="temporal duration qualifier" predicative="no">
      <rhs>
         <alt>
            <kw>YEAR</kw>
            <kw>TO</kw>
            <kw>MONTH</kw>
         </alt>
         <alt>
            <kw>DAY</kw>
            <kw>TO</kw>
            <kw>SECOND</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="reference value type" predicative="no">
      <rhs>
         <alt>
            <BNF name="graph reference value type"/>
         </alt>
         <alt>
            <BNF name="binding table reference value type"/>
         </alt>
         <alt>
            <BNF name="node reference value type"/>
         </alt>
         <alt>
            <BNF name="edge reference value type"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="immaterial value type" predicative="no">
      <rhs>
         <alt>
            <BNF name="null type"/>
         </alt>
         <alt>
            <BNF name="empty type"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="null type" predicative="no">
      <rhs>
         <kw>NULL</kw>
      </rhs>
   </BNFdef>
   <BNFdef name="empty type" predicative="no">
      <rhs>
         <alt>
            <kw>NULL</kw>
            <BNF name="not null"/>
         </alt>
         <alt>
            <kw>NOTHING</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="graph reference value type" predicative="no">
      <rhs>
         <alt>
            <BNF name="open graph reference value type"/>
         </alt>
         <alt>
            <BNF name="closed graph reference value type"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="closed graph reference value type" predicative="no">
      <rhs>
         <opt>
            <kw>PROPERTY</kw>
         </opt>
         <kw>GRAPH</kw>
         <BNF name="nested graph type specification"/>
         <opt>
            <BNF name="not null"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="open graph reference value type" predicative="no">
      <rhs>
         <kw>ANY</kw>
         <opt>
            <kw>PROPERTY</kw>
         </opt>
         <kw>GRAPH</kw>
         <opt>
            <BNF name="not null"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="binding table reference value type" predicative="no">
      <rhs>
         <BNF name="binding table type"/>
         <opt>
            <BNF name="not null"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="node reference value type" predicative="no">
      <rhs>
         <alt>
            <BNF name="open node reference value type"/>
         </alt>
         <alt>
            <BNF name="closed node reference value type"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="closed node reference value type" predicative="no">
      <rhs>
         <BNF name="node type specification"/>
         <opt>
            <BNF name="not null"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="open node reference value type" predicative="no">
      <rhs>
         <opt>
            <kw>ANY</kw>
         </opt>
         <BNF name="node synonym"/>
         <opt>
            <BNF name="not null"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="edge reference value type" predicative="no">
      <rhs>
         <alt>
            <BNF name="open edge reference value type"/>
         </alt>
         <alt>
            <BNF name="closed edge reference value type"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="closed edge reference value type" predicative="no">
      <rhs>
         <BNF name="edge type specification"/>
         <opt>
            <BNF name="not null"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="open edge reference value type" predicative="no">
      <rhs>
         <opt>
            <kw>ANY</kw>
         </opt>
         <BNF name="edge synonym"/>
         <opt>
            <BNF name="not null"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="constructed value type" predicative="no">
      <rhs>
         <alt>
            <BNF name="path value type"/>
         </alt>
         <alt>
            <BNF name="list value type"/>
         </alt>
         <alt>
            <BNF name="record type"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="path value type" predicative="no">
      <rhs>
         <kw>PATH</kw>
         <opt>
            <BNF name="not null"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="list value type" predicative="no">
      <rhs>
         <group>
            <alt>
               <BNF name="list value type name"/>
               <BNF name="left angle bracket"/>
               <BNF name="value type"/>
               <BNF name="right angle bracket"/>
            </alt>
            <alt>
               <opt>
                  <BNF name="value type"/>
               </opt>
               <BNF name="list value type name"/>
            </alt>
         </group>
         <opt>
            <BNF name="left bracket"/>
            <BNF name="max length"/>
            <BNF name="right bracket"/>
         </opt>
         <opt>
            <BNF name="not null"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="list value type name" predicative="no">
      <rhs>
         <opt>
            <kw>GROUP</kw>
         </opt>
         <BNF name="list value type name synonym"/>
      </rhs>
   </BNFdef>
   <BNFdef name="list value type name synonym" predicative="no">
      <rhs>
         <alt>
            <kw>LIST</kw>
         </alt>
         <alt>
            <kw>ARRAY</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="record type" predicative="no">
      <rhs>
         <alt>
            <opt>
               <kw>ANY</kw>
            </opt>
            <kw>RECORD</kw>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
         <alt>
            <opt>
               <kw>RECORD</kw>
            </opt>
            <BNF name="field types specification"/>
            <opt>
               <BNF name="not null"/>
            </opt>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="field types specification" predicative="no">
      <rhs>
         <BNF name="left brace"/>
         <opt>
            <BNF name="field type list"/>
         </opt>
         <BNF name="right brace"/>
      </rhs>
   </BNFdef>
   <BNFdef name="field type list" predicative="no">
      <rhs>
         <BNF name="field type"/>
         <opt>
            <group>
               <BNF name="comma"/>
               <BNF name="field type"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="dynamic union type" predicative="no">
      <rhs>
         <alt>
            <BNF name="open dynamic union type"/>
         </alt>
         <alt>
            <BNF name="dynamic property value type"/>
         </alt>
         <alt>
            <BNF name="closed dynamic union type"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="open dynamic union type" predicative="no">
      <rhs>
         <kw>ANY</kw>
         <opt>
            <kw>VALUE</kw>
         </opt>
         <opt>
            <BNF name="not null"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="dynamic property value type" predicative="no">
      <rhs>
         <opt>
            <kw>ANY</kw>
         </opt>
         <kw>PROPERTY</kw>
         <kw>VALUE</kw>
         <opt>
            <BNF name="not null"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="closed dynamic union type" predicative="no">
      <rhs>
         <alt>
            <kw>ANY</kw>
            <opt>
               <kw>VALUE</kw>
            </opt>
            <BNF name="left angle bracket"/>
            <BNF name="component type list"/>
            <BNF name="right angle bracket"/>
         </alt>
         <alt>
            <BNF name="component type list"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="component type list" predicative="no">
      <rhs>
         <BNF name="component type"/>
         <opt>
            <group>
               <BNF name="vertical bar"/>
               <BNF name="component type"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="component type" predicative="no">
      <rhs>
         <BNF name="value type"/>
      </rhs>
   </BNFdef>
   <BNFdef name="not null" predicative="no">
      <rhs>
         <kw> NOT</kw>
         <kw>NULL</kw>
      </rhs>
   </BNFdef>
   <BNFdef name="field type" predicative="no">
      <rhs>
         <BNF name="field name"/>
         <opt>
            <BNF name="typed"/>
         </opt>
         <BNF name="value type"/>
      </rhs>
   </BNFdef>
   <BNFdef name="search condition" predicative="no">
      <rhs>
         <BNF name="boolean value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="predicate" predicative="no">
      <rhs>
         <alt>
            <BNF name="comparison predicate"/>
         </alt>
         <alt>
            <BNF name="exists predicate"/>
         </alt>
         <alt>
            <BNF name="null predicate"/>
         </alt>
         <alt>
            <BNF name="normalized predicate"/>
         </alt>
         <alt>
            <BNF name="value type predicate"/>
         </alt>
         <alt>
            <BNF name="directed predicate"/>
         </alt>
         <alt>
            <BNF name="labeled predicate"/>
         </alt>
         <alt>
            <BNF name="source/destination predicate"/>
         </alt>
         <alt>
            <BNF name="all_different predicate"/>
         </alt>
         <alt>
            <BNF name="same predicate"/>
         </alt>
         <alt>
            <BNF name="property_exists predicate"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="comparison predicate" predicative="no">
      <rhs>
         <BNF name="comparison predicand"/>
         <BNF name="comparison predicate part 2"/>
      </rhs>
   </BNFdef>
   <BNFdef name="comparison predicate part 2" predicative="no">
      <rhs>
         <BNF name="comp op"/>
         <BNF name="comparison predicand"/>
      </rhs>
   </BNFdef>
   <BNFdef name="comp op" predicative="no">
      <rhs>
         <alt>
            <BNF name="equals operator"/>
         </alt>
         <alt>
            <BNF name="not equals operator"/>
         </alt>
         <alt>
            <BNF name="less than operator"/>
         </alt>
         <alt>
            <BNF name="greater than operator"/>
         </alt>
         <alt>
            <BNF name="less than or equals operator"/>
         </alt>
         <alt>
            <BNF name="greater than or equals operator"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="comparison predicand" predicative="no">
      <rhs>
         <alt>
            <BNF name="common value expression"/>
         </alt>
         <alt>
            <BNF name="boolean predicand"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="exists predicate" predicative="no">
      <rhs>
         <kw>EXISTS</kw>
         <group>
            <alt>
               <BNF name="left brace"/>
               <BNF name="graph pattern"/>
               <BNF name="right brace"/>
            </alt>
            <alt>
               <BNF name="left paren"/>
               <BNF name="graph pattern"/>
               <BNF name="right paren"/>
            </alt>
            <alt>
               <BNF name="left brace"/>
               <BNF name="match statement block"/>
               <BNF name="right brace"/>
            </alt>
            <alt>
               <BNF name="left paren"/>
               <BNF name="match statement block"/>
               <BNF name="right paren"/>
            </alt>
            <alt>
               <BNF name="nested query specification"/>
            </alt>
         </group>
      </rhs>
   </BNFdef>
   <BNFdef name="null predicate" predicative="no">
      <rhs>
         <BNF name="value expression primary"/>
         <BNF name="null predicate part 2"/>
      </rhs>
   </BNFdef>
   <BNFdef name="null predicate part 2" predicative="no">
      <rhs>
         <kw>IS</kw>
         <opt>
            <kw>NOT</kw>
         </opt>
         <kw>NULL</kw>
      </rhs>
   </BNFdef>
   <BNFdef name="value type predicate" predicative="no">
      <rhs>
         <BNF name="value expression primary"/>
         <BNF name="value type predicate part 2"/>
      </rhs>
   </BNFdef>
   <BNFdef name="value type predicate part 2" predicative="no">
      <rhs>
         <kw>IS</kw>
         <opt>
            <kw>NOT</kw>
         </opt>
         <BNF name="typed"/>
         <BNF name="value type"/>
      </rhs>
   </BNFdef>
   <BNFdef name="normalized predicate" predicative="no">
      <rhs>
         <BNF name="string value expression"/>
         <BNF name="normalized predicate part 2"/>
      </rhs>
   </BNFdef>
   <BNFdef name="normalized predicate part 2" predicative="no">
      <rhs>
         <kw>IS</kw>
         <opt>
            <kw>NOT</kw>
         </opt>
         <opt>
            <BNF name="normal form"/>
         </opt>
         <kw>NORMALIZED</kw>
      </rhs>
   </BNFdef>
   <BNFdef name="directed predicate" predicative="no">
      <rhs>
         <BNF name="element variable reference"/>
         <BNF name="directed predicate part 2"/>
      </rhs>
   </BNFdef>
   <BNFdef name="directed predicate part 2" predicative="no">
      <rhs>
         <kw>IS</kw>
         <opt>
            <kw>NOT</kw>
         </opt>
         <kw>DIRECTED</kw>
      </rhs>
   </BNFdef>
   <BNFdef name="labeled predicate" predicative="no">
      <rhs>
         <BNF name="element variable reference"/>
         <BNF name="labeled predicate part 2"/>
      </rhs>
   </BNFdef>
   <BNFdef name="labeled predicate part 2" predicative="no">
      <rhs>
         <BNF name="is labeled or colon"/>
         <BNF name="label expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="is labeled or colon" predicative="no">
      <rhs>
         <alt>
            <kw>IS</kw>
            <opt>
               <kw>NOT</kw>
            </opt>
            <kw>LABELED</kw>
         </alt>
         <alt>
            <BNF name="colon"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="source/destination predicate" predicative="no">
      <rhs>
         <alt>
            <BNF name="node reference"/>
            <BNF name="source predicate part 2"/>
         </alt>
         <alt>
            <BNF name="node reference"/>
            <BNF name="destination predicate part 2"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="node reference" predicative="no">
      <rhs>
         <BNF name="element variable reference"/>
      </rhs>
   </BNFdef>
   <BNFdef name="source predicate part 2" predicative="no">
      <rhs>
         <kw>IS</kw>
         <opt>
            <kw>NOT</kw>
         </opt>
         <kw>SOURCE</kw>
         <kw>OF</kw>
         <BNF name="edge reference"/>
      </rhs>
   </BNFdef>
   <BNFdef name="destination predicate part 2" predicative="no">
      <rhs>
         <kw>IS</kw>
         <opt>
            <kw>NOT</kw>
         </opt>
         <kw>DESTINATION</kw>
         <kw>OF</kw>
         <BNF name="edge reference"/>
      </rhs>
   </BNFdef>
   <BNFdef name="edge reference" predicative="no">
      <rhs>
         <BNF name="element variable reference"/>
      </rhs>
   </BNFdef>
   <BNFdef name="all_different predicate" predicative="no">
      <rhs>
         <kw>ALL_DIFFERENT</kw>
         <BNF name="left paren"/>
         <BNF name="element variable reference"/>
         <BNF name="comma"/>
         <BNF name="element variable reference"/>
         <opt>
            <group>
               <BNF name="comma"/>
               <BNF name="element variable reference"/>
            </group>
            <repeat/>
         </opt>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="same predicate" predicative="no">
      <rhs>
         <kw>SAME</kw>
         <BNF name="left paren"/>
         <BNF name="element variable reference"/>
         <BNF name="comma"/>
         <BNF name="element variable reference"/>
         <opt>
            <group>
               <BNF name="comma"/>
               <BNF name="element variable reference"/>
            </group>
            <repeat/>
         </opt>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="property_exists predicate" predicative="no">
      <rhs>
         <kw>PROPERTY_EXISTS</kw>
         <BNF name="left paren"/>
         <BNF name="element variable reference"/>
         <BNF name="comma"/>
         <BNF name="property name"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="value expression" predicative="no">
      <rhs>
         <alt>
            <BNF name="common value expression"/>
         </alt>
         <alt>
            <BNF name="boolean value expression"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="common value expression" predicative="no">
      <rhs>
         <alt>
            <BNF name="numeric value expression"/>
         </alt>
         <alt>
            <BNF name="string value expression"/>
         </alt>
         <alt>
            <BNF name="datetime value expression"/>
         </alt>
         <alt>
            <BNF name="duration value expression"/>
         </alt>
         <alt>
            <BNF name="list value expression"/>
         </alt>
         <alt>
            <BNF name="record expression"/>
         </alt>
         <alt>
            <BNF name="path value expression"/>
         </alt>
         <alt>
            <BNF name="reference value expression"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="reference value expression" predicative="no">
      <rhs>
         <alt>
            <BNF name="graph reference value expression"/>
         </alt>
         <alt>
            <BNF name="binding table reference value expression"/>
         </alt>
         <alt>
            <BNF name="node reference value expression"/>
         </alt>
         <alt>
            <BNF name="edge reference value expression"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="graph reference value expression" predicative="no">
      <rhs>
         <alt>
            <opt>
               <kw>PROPERTY</kw>
            </opt>
            <kw>GRAPH</kw>
            <BNF name="graph expression"/>
         </alt>
         <alt>
            <BNF name="value expression primary"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="binding table reference value expression" predicative="no">
      <rhs>
         <alt>
            <opt>
               <kw>BINDING</kw>
            </opt>
            <kw>TABLE</kw>
            <BNF name="binding table expression"/>
         </alt>
         <alt>
            <BNF name="value expression primary"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="node reference value expression" predicative="no">
      <rhs>
         <BNF name="value expression primary"/>
      </rhs>
   </BNFdef>
   <BNFdef name="edge reference value expression" predicative="no">
      <rhs>
         <BNF name="value expression primary"/>
      </rhs>
   </BNFdef>
   <BNFdef name="record expression" predicative="no">
      <rhs>
         <BNF name="value expression primary"/>
      </rhs>
   </BNFdef>
   <BNFdef name="aggregating value expression" predicative="no">
      <rhs>
         <BNF name="value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="value expression primary" predicative="no">
      <rhs>
         <alt>
            <BNF name="parenthesized value expression"/>
         </alt>
         <alt>
            <BNF name="non-parenthesized value expression primary"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="parenthesized value expression" predicative="no">
      <rhs>
         <BNF name="left paren"/>
         <BNF name="value expression"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="non-parenthesized value expression primary" predicative="no">
      <rhs>
         <alt>
            <BNF name="non-parenthesized value expression primary special case"/>
         </alt>
         <alt>
            <BNF name="binding variable reference"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="non-parenthesized value expression primary special case"
            predicative="no">
      <rhs>
         <alt>
            <BNF name="aggregate function"/>
         </alt>
         <alt>
            <BNF name="unsigned value specification"/>
         </alt>
         <alt>
            <BNF name="list value constructor"/>
         </alt>
         <alt>
            <BNF name="record constructor"/>
         </alt>
         <alt>
            <BNF name="path value constructor"/>
         </alt>
         <alt>
            <BNF name="property reference"/>
         </alt>
         <alt>
            <BNF name="value query expression"/>
         </alt>
         <alt>
            <BNF name="case expression"/>
         </alt>
         <alt>
            <BNF name="cast specification"/>
         </alt>
         <alt>
            <BNF name="element_id function"/>
         </alt>
         <alt>
            <BNF name="let value expression"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="value specification" predicative="no">
      <rhs>
         <alt>
            <BNF name="literal"/>
         </alt>
         <alt>
            <BNF name="general value specification"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="unsigned value specification" predicative="no">
      <rhs>
         <alt>
            <BNF name="unsigned literal"/>
         </alt>
         <alt>
            <BNF name="general value specification"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="non-negative integer specification" predicative="no">
      <rhs>
         <alt>
            <BNF name="unsigned integer"/>
         </alt>
         <alt>
            <BNF name="dynamic parameter specification"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="general value specification" predicative="no">
      <rhs>
         <alt>
            <BNF name="dynamic parameter specification"/>
         </alt>
         <alt>
            <kw>SESSION_USER</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="dynamic parameter specification" predicative="no">
      <rhs>
         <BNF name="general parameter reference"/>
      </rhs>
   </BNFdef>
   <BNFdef name="let value expression" predicative="no">
      <rhs>
         <kw>LET</kw>
         <BNF name="let variable definition list"/>
         <kw>IN</kw>
         <BNF name="value expression"/>
         <kw>END</kw>
      </rhs>
   </BNFdef>
   <BNFdef name="value query expression" predicative="no">
      <rhs>
         <kw>VALUE</kw>
         <BNF name="nested query specification"/>
      </rhs>
   </BNFdef>
   <BNFdef name="case expression" predicative="no">
      <rhs>
         <alt>
            <BNF name="case abbreviation"/>
         </alt>
         <alt>
            <BNF name="case specification"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="case abbreviation" predicative="no">
      <rhs>
         <alt>
            <kw>NULLIF</kw>
            <BNF name="left paren"/>
            <BNF name="value expression"/>
            <BNF name="comma"/>
            <BNF name="value expression"/>
            <BNF name="right paren"/>
         </alt>
         <alt>
            <kw>COALESCE</kw>
            <BNF name="left paren"/>
            <BNF name="value expression"/>
            <group>
               <BNF name="comma"/>
               <BNF name="value expression"/>
            </group>
            <repeat/>
            <BNF name="right paren"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="case specification" predicative="no">
      <rhs>
         <alt>
            <BNF name="simple case"/>
         </alt>
         <alt>
            <BNF name="searched case"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="simple case" predicative="no">
      <rhs>
         <kw>CASE</kw>
         <BNF name="case operand"/>
         <BNF name="simple when clause"/>
         <repeat/>
         <opt>
            <BNF name="else clause"/>
         </opt>
         <kw>END</kw>
      </rhs>
   </BNFdef>
   <BNFdef name="searched case" predicative="no">
      <rhs>
         <kw>CASE</kw>
         <BNF name="searched when clause"/>
         <repeat/>
         <opt>
            <BNF name="else clause"/>
         </opt>
         <kw>END</kw>
      </rhs>
   </BNFdef>
   <BNFdef name="simple when clause" predicative="no">
      <rhs>
         <kw>WHEN</kw>
         <BNF name="when operand list"/>
         <kw>THEN</kw>
         <BNF name="result"/>
      </rhs>
   </BNFdef>
   <BNFdef name="searched when clause" predicative="no">
      <rhs>
         <kw>WHEN</kw>
         <BNF name="search condition"/>
         <kw>THEN</kw>
         <BNF name="result"/>
      </rhs>
   </BNFdef>
   <BNFdef name="else clause" predicative="no">
      <rhs>
         <kw>ELSE</kw>
         <BNF name="result"/>
      </rhs>
   </BNFdef>
   <BNFdef name="case operand" predicative="no">
      <rhs>
         <alt>
            <BNF name="non-parenthesized value expression primary"/>
         </alt>
         <alt>
            <BNF name="element variable reference"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="when operand list" predicative="no">
      <rhs>
         <BNF name="when operand"/>
         <opt>
            <group>
               <BNF name="comma"/>
               <BNF name="when operand"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="when operand" predicative="no">
      <rhs>
         <alt>
            <BNF name="non-parenthesized value expression primary"/>
         </alt>
         <alt>
            <BNF name="comparison predicate part 2"/>
         </alt>
         <alt>
            <BNF name="null predicate part 2"/>
         </alt>
         <alt>
            <BNF name="value type predicate part 2"/>
         </alt>
         <alt>
            <BNF name="normalized predicate part 2"/>
         </alt>
         <alt>
            <BNF name="directed predicate part 2"/>
         </alt>
         <alt>
            <BNF name="labeled predicate part 2"/>
         </alt>
         <alt>
            <BNF name="source predicate part 2"/>
         </alt>
         <alt>
            <BNF name="destination predicate part 2"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="result" predicative="no">
      <rhs>
         <alt>
            <BNF name="result expression"/>
         </alt>
         <alt>
            <BNF name="null literal"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="result expression" predicative="no">
      <rhs>
         <BNF name="value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="cast specification" predicative="no">
      <rhs>
         <kw>CAST</kw>
         <BNF name="left paren"/>
         <BNF name="cast operand"/>
         <kw>AS</kw>
         <BNF name="cast target"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="cast operand" predicative="no">
      <rhs>
         <alt>
            <BNF name="value expression"/>
         </alt>
         <alt>
            <BNF name="null literal"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="cast target" predicative="no">
      <rhs>
         <BNF name="value type"/>
      </rhs>
   </BNFdef>
   <BNFdef name="aggregate function" predicative="no">
      <rhs>
         <alt>
            <kw>COUNT</kw>
            <BNF name="left paren"/>
            <BNF name="asterisk"/>
            <BNF name="right paren"/>
         </alt>
         <alt>
            <BNF name="general set function"/>
         </alt>
         <alt>
            <BNF name="binary set function"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="general set function" predicative="no">
      <rhs>
         <BNF name="general set function type"/>
         <BNF name="left paren"/>
         <opt>
            <BNF name="set quantifier"/>
         </opt>
         <BNF name="value expression"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="binary set function" predicative="no">
      <rhs>
         <BNF name="binary set function type"/>
         <BNF name="left paren"/>
         <BNF name="dependent value expression"/>
         <BNF name="comma"/>
         <BNF name="independent value expression"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="general set function type" predicative="no">
      <rhs>
         <alt>
            <kw>AVG</kw>
         </alt>
         <alt>
            <kw>COUNT</kw>
         </alt>
         <alt>
            <kw>MAX</kw>
         </alt>
         <alt>
            <kw>MIN</kw>
         </alt>
         <alt>
            <kw>SUM</kw>
         </alt>
         <alt>
            <kw>COLLECT_LIST</kw>
         </alt>
         <alt>
            <kw>STDDEV_SAMP</kw>
         </alt>
         <alt>
            <kw>STDDEV_POP</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="set quantifier" predicative="no">
      <rhs>
         <alt>
            <kw>DISTINCT</kw>
         </alt>
         <alt>
            <kw>ALL</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="binary set function type" predicative="no">
      <rhs>
         <alt>
            <kw>PERCENTILE_CONT</kw>
         </alt>
         <alt>
            <kw>PERCENTILE_DISC</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="dependent value expression" predicative="no">
      <rhs>
         <opt>
            <BNF name="set quantifier"/>
         </opt>
         <BNF name="numeric value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="independent value expression" predicative="no">
      <rhs>
         <BNF name="numeric value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="element_id function" predicative="no">
      <rhs>
         <kw>ELEMENT_ID</kw>
         <BNF name="left paren"/>
         <BNF name="element variable reference"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="property reference" predicative="no">
      <rhs>
         <BNF name="property source"/>
         <BNF name="period"/>
         <BNF name="property name"/>
      </rhs>
   </BNFdef>
   <BNFdef name="property source" predicative="no">
      <rhs>
         <alt>
            <BNF name="node reference value expression"/>
         </alt>
         <alt>
            <BNF name="edge reference value expression"/>
         </alt>
         <alt>
            <BNF name="record expression"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="binding variable reference" predicative="no">
      <rhs>
         <BNF name="binding variable"/>
      </rhs>
   </BNFdef>
   <BNFdef name="path value expression" predicative="no">
      <rhs>
         <alt>
            <BNF name="path value concatenation"/>
         </alt>
         <alt>
            <BNF name="path value primary"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="path value concatenation" predicative="no">
      <rhs>
         <BNF name="path value expression 1"/>
         <BNF name="concatenation operator"/>
         <BNF name="path value primary"/>
      </rhs>
   </BNFdef>
   <BNFdef name="path value expression 1" predicative="no">
      <rhs>
         <BNF name="path value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="path value primary" predicative="no">
      <rhs>
         <BNF name="value expression primary"/>
      </rhs>
   </BNFdef>
   <BNFdef name="path value constructor" predicative="no">
      <rhs>
         <BNF name="path value constructor by enumeration"/>
      </rhs>
   </BNFdef>
   <BNFdef name="path value constructor by enumeration" predicative="no">
      <rhs>
         <kw>PATH</kw>
         <BNF name="left bracket"/>
         <BNF name="path element list"/>
         <BNF name="right bracket"/>
      </rhs>
   </BNFdef>
   <BNFdef name="path element list" predicative="no">
      <rhs>
         <BNF name="path element list start"/>
         <opt>
            <BNF name="path element list step"/>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="path element list start" predicative="no">
      <rhs>
         <BNF name="node reference value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="path element list step" predicative="no">
      <rhs>
         <BNF name="comma"/>
         <BNF name="edge reference value expression"/>
         <BNF name="comma"/>
         <BNF name="node reference value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="list value expression" predicative="no">
      <rhs>
         <alt>
            <BNF name="list concatenation"/>
         </alt>
         <alt>
            <BNF name="list primary"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="list concatenation" predicative="no">
      <rhs>
         <BNF name="list value expression 1"/>
         <BNF name="concatenation operator"/>
         <BNF name="list primary"/>
      </rhs>
   </BNFdef>
   <BNFdef name="list value expression 1" predicative="no">
      <rhs>
         <BNF name="list value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="list primary" predicative="no">
      <rhs>
         <alt>
            <BNF name="list value function"/>
         </alt>
         <alt>
            <BNF name="value expression primary"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="list value function" predicative="no">
      <rhs>
         <alt>
            <BNF name="trim list function"/>
         </alt>
         <alt>
            <BNF name="elements function"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="trim list function" predicative="no">
      <rhs>
         <kw>TRIM</kw>
         <BNF name="left paren"/>
         <BNF name="list value expression"/>
         <BNF name="comma"/>
         <BNF name="numeric value expression"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="elements function" predicative="no">
      <rhs>
         <kw>ELEMENTS</kw>
         <BNF name="left paren"/>
         <BNF name="path value expression"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="list value constructor" predicative="no">
      <rhs>
         <BNF name="list value constructor by enumeration"/>
      </rhs>
   </BNFdef>
   <BNFdef name="list value constructor by enumeration" predicative="no">
      <rhs>
         <opt>
            <BNF name="list value type name"/>
         </opt>
         <BNF name="left bracket"/>
         <opt>
            <BNF name="list element list"/>
         </opt>
         <BNF name="right bracket"/>
      </rhs>
   </BNFdef>
   <BNFdef name="list element list" predicative="no">
      <rhs>
         <BNF name="list element"/>
         <opt>
            <group>
               <BNF name="comma"/>
               <BNF name="list element"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="list element" predicative="no">
      <rhs>
         <BNF name="value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="record constructor" predicative="no">
      <rhs>
         <opt>
            <kw>RECORD</kw>
         </opt>
         <BNF name="fields specification"/>
      </rhs>
   </BNFdef>
   <BNFdef name="fields specification" predicative="no">
      <rhs>
         <BNF name="left brace"/>
         <opt>
            <BNF name="field list"/>
         </opt>
         <BNF name="right brace"/>
      </rhs>
   </BNFdef>
   <BNFdef name="field list" predicative="no">
      <rhs>
         <BNF name="field"/>
         <opt>
            <group>
               <BNF name="comma"/>
               <BNF name="field"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="field" predicative="no">
      <rhs>
         <BNF name="field name"/>
         <BNF name="colon"/>
         <BNF name="value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="boolean value expression" predicative="no">
      <rhs>
         <alt>
            <BNF name="boolean term"/>
         </alt>
         <alt>
            <BNF name="boolean value expression"/>
            <kw>OR</kw>
            <BNF name="boolean term"/>
         </alt>
         <alt>
            <BNF name="boolean value expression"/>
            <kw>XOR</kw>
            <BNF name="boolean term"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="boolean term" predicative="no">
      <rhs>
         <alt>
            <BNF name="boolean factor"/>
         </alt>
         <alt>
            <BNF name="boolean term"/>
            <kw>AND</kw>
            <BNF name="boolean factor"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="boolean factor" predicative="no">
      <rhs>
         <opt>
            <kw>NOT</kw>
         </opt>
         <BNF name="boolean test"/>
      </rhs>
   </BNFdef>
   <BNFdef name="boolean test" predicative="no">
      <rhs>
         <BNF name="boolean primary"/>
         <opt>
            <kw>IS</kw>
            <opt>
               <kw>NOT</kw>
            </opt>
            <BNF name="truth value"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="truth value" predicative="no">
      <rhs>
         <alt>
            <kw>TRUE</kw>
         </alt>
         <alt>
            <kw>FALSE</kw>
         </alt>
         <alt>
            <kw>UNKNOWN</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="boolean primary" predicative="no">
      <rhs>
         <alt>
            <BNF name="predicate"/>
         </alt>
         <alt>
            <BNF name="boolean predicand"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="boolean predicand" predicative="no">
      <rhs>
         <alt>
            <BNF name="parenthesized boolean value expression"/>
         </alt>
         <alt>
            <BNF name="non-parenthesized value expression primary"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="parenthesized boolean value expression" predicative="no">
      <rhs>
         <BNF name="left paren"/>
         <BNF name="boolean value expression"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="numeric value expression" predicative="no">
      <rhs>
         <alt>
            <BNF name="term"/>
         </alt>
         <alt>
            <BNF name="numeric value expression"/>
            <BNF name="plus sign"/>
            <BNF name="term"/>
         </alt>
         <alt>
            <BNF name="numeric value expression"/>
            <BNF name="minus sign"/>
            <BNF name="term"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="term" predicative="no">
      <rhs>
         <alt>
            <BNF name="factor"/>
         </alt>
         <alt>
            <BNF name="term"/>
            <BNF name="asterisk"/>
            <BNF name="factor"/>
         </alt>
         <alt>
            <BNF name="term"/>
            <BNF name="solidus"/>
            <BNF name="factor"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="factor" predicative="no">
      <rhs>
         <opt>
            <BNF name="sign"/>
         </opt>
         <BNF name="numeric primary"/>
      </rhs>
   </BNFdef>
   <BNFdef name="numeric primary" predicative="no">
      <rhs>
         <alt>
            <BNF name="value expression primary"/>
         </alt>
         <alt>
            <BNF name="numeric value function"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="numeric value function" predicative="no">
      <rhs>
         <alt>
            <BNF name="length expression"/>
         </alt>
         <alt>
            <BNF name="cardinality expression"/>
         </alt>
         <alt>
            <BNF name="absolute value expression"/>
         </alt>
         <alt>
            <BNF name="modulus expression"/>
         </alt>
         <alt>
            <BNF name="trigonometric function"/>
         </alt>
         <alt>
            <BNF name="general logarithm function"/>
         </alt>
         <alt>
            <BNF name="common logarithm"/>
         </alt>
         <alt>
            <BNF name="natural logarithm"/>
         </alt>
         <alt>
            <BNF name="exponential function"/>
         </alt>
         <alt>
            <BNF name="power function"/>
         </alt>
         <alt>
            <BNF name="square root"/>
         </alt>
         <alt>
            <BNF name="floor function"/>
         </alt>
         <alt>
            <BNF name="ceiling function"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="length expression" predicative="no">
      <rhs>
         <alt>
            <BNF name="char length expression"/>
         </alt>
         <alt>
            <BNF name="byte length expression"/>
         </alt>
         <alt>
            <BNF name="path length expression"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="cardinality expression" predicative="no">
      <rhs>
         <alt>
            <kw>CARDINALITY</kw>
            <BNF name="left paren"/>
            <BNF name="cardinality expression argument"/>
            <BNF name="right paren"/>
         </alt>
         <alt>
            <kw>SIZE</kw>
            <BNF name="left paren"/>
            <BNF name="list value expression"/>
            <BNF name="right paren"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="cardinality expression argument" predicative="no">
      <rhs>
         <alt>
            <BNF name="binding table reference value expression"/>
         </alt>
         <alt>
            <BNF name="path value expression"/>
         </alt>
         <alt>
            <BNF name="list value expression"/>
         </alt>
         <alt>
            <BNF name="record expression"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="char length expression" predicative="no">
      <rhs>
         <group>
            <alt>
               <kw>CHAR_LENGTH</kw>
            </alt>
            <alt>
               <kw>CHARACTER_LENGTH</kw>
            </alt>
         </group>
         <BNF name="left paren"/>
         <BNF name="character string value expression"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="byte length expression" predicative="no">
      <rhs>
         <group>
            <alt>
               <kw>BYTE_LENGTH</kw>
            </alt>
            <alt>
               <kw>OCTET_LENGTH</kw>
            </alt>
         </group>
         <BNF name="left paren"/>
         <BNF name="byte string value expression"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="path length expression" predicative="no">
      <rhs>
         <kw>PATH_LENGTH</kw>
         <BNF name="left paren"/>
         <BNF name="path value expression"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="absolute value expression" predicative="no">
      <rhs>
         <kw>ABS</kw>
         <BNF name="left paren"/>
         <BNF name="numeric value expression"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="modulus expression" predicative="no">
      <rhs>
         <kw>MOD</kw>
         <BNF name="left paren"/>
         <BNF name="numeric value expression dividend"/>
         <BNF name="comma"/>
         <BNF name="numeric value expression divisor"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="numeric value expression dividend" predicative="no">
      <rhs>
         <BNF name="numeric value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="numeric value expression divisor" predicative="no">
      <rhs>
         <BNF name="numeric value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="trigonometric function" predicative="no">
      <rhs>
         <BNF name="trigonometric function name"/>
         <BNF name="left paren"/>
         <BNF name="numeric value expression"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="trigonometric function name" predicative="no">
      <rhs>
         <alt>
            <kw>SIN</kw>
         </alt>
         <alt>
            <kw>COS</kw>
         </alt>
         <alt>
            <kw>TAN</kw>
         </alt>
         <alt>
            <kw>COT</kw>
         </alt>
         <alt>
            <kw>SINH</kw>
         </alt>
         <alt>
            <kw>COSH</kw>
         </alt>
         <alt>
            <kw>TANH</kw>
         </alt>
         <alt>
            <kw>ASIN</kw>
         </alt>
         <alt>
            <kw>ACOS</kw>
         </alt>
         <alt>
            <kw>ATAN</kw>
         </alt>
         <alt>
            <kw>DEGREES</kw>
         </alt>
         <alt>
            <kw>RADIANS</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="general logarithm function" predicative="no">
      <rhs>
         <kw>LOG</kw>
         <BNF name="left paren"/>
         <BNF name="general logarithm base"/>
         <BNF name="comma"/>
         <BNF name="general logarithm argument"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="general logarithm base" predicative="no">
      <rhs>
         <BNF name="numeric value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="general logarithm argument" predicative="no">
      <rhs>
         <BNF name="numeric value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="common logarithm" predicative="no">
      <rhs>
         <kw>LOG10</kw>
         <BNF name="left paren"/>
         <BNF name="numeric value expression"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="natural logarithm" predicative="no">
      <rhs>
         <kw>LN</kw>
         <BNF name="left paren"/>
         <BNF name="numeric value expression"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="exponential function" predicative="no">
      <rhs>
         <kw>EXP</kw>
         <BNF name="left paren"/>
         <BNF name="numeric value expression"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="power function" predicative="no">
      <rhs>
         <kw>POWER</kw>
         <BNF name="left paren"/>
         <BNF name="numeric value expression base"/>
         <BNF name="comma"/>
         <BNF name="numeric value expression exponent"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="numeric value expression base" predicative="no">
      <rhs>
         <BNF name="numeric value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="numeric value expression exponent" predicative="no">
      <rhs>
         <BNF name="numeric value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="square root" predicative="no">
      <rhs>
         <kw>SQRT</kw>
         <BNF name="left paren"/>
         <BNF name="numeric value expression"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="floor function" predicative="no">
      <rhs>
         <kw>FLOOR</kw>
         <BNF name="left paren"/>
         <BNF name="numeric value expression"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="ceiling function" predicative="no">
      <rhs>
         <group>
            <alt>
               <kw>CEIL</kw>
            </alt>
            <alt>
               <kw>CEILING</kw>
            </alt>
         </group>
         <BNF name="left paren"/>
         <BNF name="numeric value expression"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="string value expression" predicative="no">
      <rhs>
         <alt>
            <BNF name="character string value expression"/>
         </alt>
         <alt>
            <BNF name="byte string value expression"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="character string value expression" predicative="no">
      <rhs>
         <alt>
            <BNF name="character string concatenation"/>
         </alt>
         <alt>
            <BNF name="character string primary"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="character string concatenation" predicative="no">
      <rhs>
         <BNF name="character string value expression"/>
         <BNF name="concatenation operator"/>
         <BNF name="character string primary"/>
      </rhs>
   </BNFdef>
   <BNFdef name="character string primary" predicative="no">
      <rhs>
         <alt>
            <BNF name="value expression primary"/>
         </alt>
         <alt>
            <BNF name="character string function"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="byte string value expression" predicative="no">
      <rhs>
         <alt>
            <BNF name="byte string concatenation"/>
         </alt>
         <alt>
            <BNF name="byte string primary"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="byte string primary" predicative="no">
      <rhs>
         <alt>
            <BNF name="value expression primary"/>
         </alt>
         <alt>
            <BNF name="byte string function"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="byte string concatenation" predicative="no">
      <rhs>
         <BNF name="byte string value expression"/>
         <BNF name="concatenation operator"/>
         <BNF name="byte string primary"/>
      </rhs>
   </BNFdef>
   <BNFdef name="character string function" predicative="no">
      <rhs>
         <alt>
            <BNF name="substring function"/>
         </alt>
         <alt>
            <BNF name="fold"/>
         </alt>
         <alt>
            <BNF name="trim function"/>
         </alt>
         <alt>
            <BNF name="normalize function"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="substring function" predicative="no">
      <rhs>
         <group>
            <alt>
               <kw>LEFT</kw>
            </alt>
            <alt>
               <kw>RIGHT</kw>
            </alt>
         </group>
         <BNF name="left paren"/>
         <BNF name="character string value expression"/>
         <BNF name="comma"/>
         <BNF name="string length"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="fold" predicative="no">
      <rhs>
         <group>
            <alt>
               <kw>UPPER</kw>
            </alt>
            <alt>
               <kw>LOWER</kw>
            </alt>
         </group>
         <BNF name="left paren"/>
         <BNF name="character string value expression"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="trim function" predicative="no">
      <rhs>
         <alt>
            <BNF name="single-character trim function"/>
         </alt>
         <alt>
            <BNF name="multi-character trim function"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="single-character trim function" predicative="no">
      <rhs>
         <kw>TRIM</kw>
         <BNF name="left paren"/>
         <BNF name="trim operands"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="multi-character trim function" predicative="no">
      <rhs>
         <group>
            <alt>
               <kw>BTRIM</kw>
            </alt>
            <alt>
               <kw>LTRIM</kw>
            </alt>
            <alt>
               <kw>RTRIM</kw>
            </alt>
         </group>
         <BNF name="left paren"/>
         <BNF name="trim source"/>
         <opt>
            <BNF name="comma"/>
            <BNF name="trim character string"/>
         </opt>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="trim operands" predicative="no">
      <rhs>
         <opt>
            <opt>
               <BNF name="trim specification"/>
            </opt>
            <opt>
               <BNF name="trim character string"/>
            </opt>
            <kw>FROM</kw>
         </opt>
         <BNF name="trim source"/>
      </rhs>
   </BNFdef>
   <BNFdef name="trim source" predicative="no">
      <rhs>
         <BNF name="character string value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="trim specification" predicative="no">
      <rhs>
         <alt>
            <kw>LEADING</kw>
         </alt>
         <alt>
            <kw>TRAILING</kw>
         </alt>
         <alt>
            <kw>BOTH</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="trim character string" predicative="no">
      <rhs>
         <BNF name="character string value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="normalize function" predicative="no">
      <rhs>
         <kw>NORMALIZE</kw>
         <BNF name="left paren"/>
         <BNF name="character string value expression"/>
         <opt>
            <BNF name="comma"/>
            <BNF name="normal form"/>
         </opt>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="normal form" predicative="no">
      <rhs>
         <alt>
            <kw>NFC</kw>
         </alt>
         <alt>
            <kw>NFD</kw>
         </alt>
         <alt>
            <kw>NFKC</kw>
         </alt>
         <alt>
            <kw>NFKD</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="string length" predicative="no">
      <rhs>
         <BNF name="numeric value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="byte string function" predicative="no">
      <rhs>
         <alt>
            <BNF name="byte string substring function"/>
         </alt>
         <alt>
            <BNF name="byte string trim function"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="byte string substring function" predicative="no">
      <rhs>
         <group>
            <alt>
               <kw>LEFT</kw>
            </alt>
            <alt>
               <kw>RIGHT</kw>
            </alt>
         </group>
         <BNF name="left paren"/>
         <BNF name="byte string value expression"/>
         <BNF name="comma"/>
         <BNF name="string length"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="byte string trim function" predicative="no">
      <rhs>
         <kw>TRIM</kw>
         <BNF name="left paren"/>
         <BNF name="byte string trim operands"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="byte string trim operands" predicative="no">
      <rhs>
         <opt>
            <opt>
               <BNF name="trim specification"/>
            </opt>
            <opt>
               <BNF name="trim byte string"/>
            </opt>
            <kw>FROM</kw>
         </opt>
         <BNF name="byte string trim source"/>
      </rhs>
   </BNFdef>
   <BNFdef name="byte string trim source" predicative="no">
      <rhs>
         <BNF name="byte string value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="trim byte string" predicative="no">
      <rhs>
         <BNF name="byte string value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="datetime value expression" predicative="no">
      <rhs>
         <alt>
            <BNF name="datetime primary"/>
         </alt>
         <alt>
            <BNF name="duration value expression"/>
            <BNF name="plus sign"/>
            <BNF name="datetime primary"/>
         </alt>
         <alt>
            <BNF name="datetime value expression"/>
            <BNF name="plus sign"/>
            <BNF name="duration term"/>
         </alt>
         <alt>
            <BNF name="datetime value expression"/>
            <BNF name="minus sign"/>
            <BNF name="duration term"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="datetime primary" predicative="no">
      <rhs>
         <alt>
            <BNF name="value expression primary"/>
         </alt>
         <alt>
            <BNF name="datetime value function"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="datetime value function" predicative="no">
      <rhs>
         <alt>
            <BNF name="date function"/>
         </alt>
         <alt>
            <BNF name="time function"/>
         </alt>
         <alt>
            <BNF name="datetime function"/>
         </alt>
         <alt>
            <BNF name="localtime function"/>
         </alt>
         <alt>
            <BNF name="localdatetime function"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="date function" predicative="no">
      <rhs>
         <alt>
            <kw>CURRENT_DATE</kw>
         </alt>
         <alt>
            <kw>DATE</kw>
            <BNF name="left paren"/>
            <opt>
               <BNF name="date function parameters"/>
            </opt>
            <BNF name="right paren"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="time function" predicative="no">
      <rhs>
         <alt>
            <kw>CURRENT_TIME</kw>
         </alt>
         <alt>
            <kw>ZONED_TIME</kw>
            <BNF name="left paren"/>
            <opt>
               <BNF name="time function parameters"/>
            </opt>
            <BNF name="right paren"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="localtime function" predicative="no">
      <rhs>
         <kw>LOCAL_TIME</kw>
         <opt>
            <BNF name="left paren"/>
            <opt>
               <BNF name="time function parameters"/>
            </opt>
            <BNF name="right paren"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="datetime function" predicative="no">
      <rhs>
         <alt>
            <kw>CURRENT_TIMESTAMP</kw>
         </alt>
         <alt>
            <kw>ZONED_DATETIME</kw>
            <BNF name="left paren"/>
            <opt>
               <BNF name="datetime function parameters"/>
            </opt>
            <BNF name="right paren"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="localdatetime function" predicative="no">
      <rhs>
         <alt>
            <kw>LOCAL_TIMESTAMP</kw>
         </alt>
         <alt>
            <kw>LOCAL_DATETIME</kw>
            <BNF name="left paren"/>
            <opt>
               <BNF name="datetime function parameters"/>
            </opt>
            <BNF name="right paren"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="date function parameters" predicative="no">
      <rhs>
         <alt>
            <BNF name="date string"/>
         </alt>
         <alt>
            <BNF name="record constructor"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="time function parameters" predicative="no">
      <rhs>
         <alt>
            <BNF name="time string"/>
         </alt>
         <alt>
            <BNF name="record constructor"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="datetime function parameters" predicative="no">
      <rhs>
         <alt>
            <BNF name="datetime string"/>
         </alt>
         <alt>
            <BNF name="record constructor"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="duration value expression" predicative="no">
      <rhs>
         <alt>
            <BNF name="duration term"/>
         </alt>
         <alt>
            <BNF name="duration addition and subtraction"/>
         </alt>
         <alt>
            <BNF name="datetime subtraction"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="duration addition and subtraction" predicative="no">
      <rhs>
         <alt>
            <BNF name="duration value expression 1"/>
            <BNF name="plus sign"/>
            <BNF name="duration term 1"/>
         </alt>
         <alt>
            <BNF name="duration value expression 1"/>
            <BNF name="minus sign"/>
            <BNF name="duration term 1"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="datetime subtraction" predicative="no">
      <rhs>
         <kw>DURATION_BETWEEN</kw>
         <BNF name="left paren"/>
         <BNF name="datetime subtraction parameters"/>
         <BNF name="right paren"/>
         <opt>
            <BNF name="temporal duration qualifier"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="datetime subtraction parameters" predicative="no">
      <rhs>
         <BNF name="datetime value expression 1"/>
         <BNF name="comma"/>
         <BNF name="datetime value expression 2"/>
      </rhs>
   </BNFdef>
   <BNFdef name="duration term" predicative="no">
      <rhs>
         <alt>
            <BNF name="duration factor"/>
         </alt>
         <alt>
            <BNF name="duration term 2"/>
            <BNF name="asterisk"/>
            <BNF name="factor"/>
         </alt>
         <alt>
            <BNF name="duration term 2"/>
            <BNF name="solidus"/>
            <BNF name="factor"/>
         </alt>
         <alt>
            <BNF name="term"/>
            <BNF name="asterisk"/>
            <BNF name="duration factor"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="duration factor" predicative="no">
      <rhs>
         <opt>
            <BNF name="sign"/>
         </opt>
         <BNF name="duration primary"/>
      </rhs>
   </BNFdef>
   <BNFdef name="duration primary" predicative="no">
      <rhs>
         <alt>
            <BNF name="value expression primary"/>
         </alt>
         <alt>
            <BNF name="duration value function"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="duration value expression 1" predicative="no">
      <rhs>
         <BNF name="duration value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="duration term 1" predicative="no">
      <rhs>
         <BNF name="duration term"/>
      </rhs>
   </BNFdef>
   <BNFdef name="duration term 2" predicative="no">
      <rhs>
         <BNF name="duration term"/>
      </rhs>
   </BNFdef>
   <BNFdef name="datetime value expression 1" predicative="no">
      <rhs>
         <BNF name="datetime value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="datetime value expression 2" predicative="no">
      <rhs>
         <BNF name="datetime value expression"/>
      </rhs>
   </BNFdef>
   <BNFdef name="duration value function" predicative="no">
      <rhs>
         <alt>
            <BNF name="duration function"/>
         </alt>
         <alt>
            <BNF name="duration absolute value function"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="duration function" predicative="no">
      <rhs>
         <kw>DURATION</kw>
         <BNF name="left paren"/>
         <BNF name="duration function parameters"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="duration function parameters" predicative="no">
      <rhs>
         <alt>
            <BNF name="duration string"/>
         </alt>
         <alt>
            <BNF name="record constructor"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="duration absolute value function" predicative="no">
      <rhs>
         <kw>ABS</kw>
         <BNF name="left paren"/>
         <BNF name="duration value expression"/>
         <BNF name="right paren"/>
      </rhs>
   </BNFdef>
   <BNFdef name="authorization identifier" predicative="no">
      <rhs>
         <BNF name="identifier"/>
      </rhs>
   </BNFdef>
   <BNFdef name="object name" predicative="no">
      <rhs>
         <BNF name="identifier"/>
      </rhs>
   </BNFdef>
   <BNFdef name="object name or binding variable" predicative="no">
      <rhs>
         <BNF name="regular identifier"/>
      </rhs>
   </BNFdef>
   <BNFdef name="directory name" predicative="no">
      <rhs>
         <BNF name="identifier"/>
      </rhs>
   </BNFdef>
   <BNFdef name="schema name" predicative="no">
      <rhs>
         <BNF name="identifier"/>
      </rhs>
   </BNFdef>
   <BNFdef name="graph name" predicative="no">
      <rhs>
         <alt>
            <BNF name="regular identifier"/>
         </alt>
         <alt>
            <BNF name="delimited graph name"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="delimited graph name" predicative="no">
      <rhs>
         <BNF name="delimited identifier"/>
      </rhs>
   </BNFdef>
   <BNFdef name="graph type name" predicative="no">
      <rhs>
         <BNF name="identifier"/>
      </rhs>
   </BNFdef>
   <BNFdef name="node type name" predicative="no">
      <rhs>
         <BNF name="identifier"/>
      </rhs>
   </BNFdef>
   <BNFdef name="edge type name" predicative="no">
      <rhs>
         <BNF name="identifier"/>
      </rhs>
   </BNFdef>
   <BNFdef name="binding table name" predicative="no">
      <rhs>
         <alt>
            <BNF name="regular identifier"/>
         </alt>
         <alt>
            <BNF name="delimited binding table name"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="delimited binding table name" predicative="no">
      <rhs>
         <BNF name="delimited identifier"/>
      </rhs>
   </BNFdef>
   <BNFdef name="procedure name" predicative="no">
      <rhs>
         <BNF name="identifier"/>
      </rhs>
   </BNFdef>
   <BNFdef name="label name" predicative="no">
      <rhs>
         <BNF name="identifier"/>
      </rhs>
   </BNFdef>
   <BNFdef name="property name" predicative="no">
      <rhs>
         <BNF name="identifier"/>
      </rhs>
   </BNFdef>
   <BNFdef name="field name" predicative="no">
      <rhs>
         <BNF name="identifier"/>
      </rhs>
   </BNFdef>
   <BNFdef name="parameter name" predicative="no">
      <rhs>
         <BNF name="separated identifier"/>
      </rhs>
   </BNFdef>
   <BNFdef name="graph pattern variable" predicative="no">
      <rhs>
         <alt>
            <BNF name="element variable"/>
         </alt>
         <alt>
            <BNF name="path or subpath variable"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="path or subpath variable" predicative="no">
      <rhs>
         <alt>
            <BNF name="path variable"/>
         </alt>
         <alt>
            <BNF name="subpath variable"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="element variable" predicative="no">
      <rhs>
         <BNF name="binding variable"/>
      </rhs>
   </BNFdef>
   <BNFdef name="path variable" predicative="no">
      <rhs>
         <BNF name="binding variable"/>
      </rhs>
   </BNFdef>
   <BNFdef name="subpath variable" predicative="no">
      <rhs>
         <BNF name="regular identifier"/>
      </rhs>
   </BNFdef>
   <BNFdef name="binding variable" predicative="no">
      <rhs>
         <BNF name="regular identifier"/>
      </rhs>
   </BNFdef>
   <BNFdef name="literal" predicative="no">
      <rhs>
         <alt>
            <BNF name="signed numeric literal"/>
         </alt>
         <alt>
            <BNF name="general literal"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="unsigned literal" predicative="no">
      <rhs>
         <alt>
            <BNF name="unsigned numeric literal"/>
         </alt>
         <alt>
            <BNF name="general literal"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="general literal" predicative="no">
      <rhs>
         <alt>
            <BNF name="boolean literal"/>
         </alt>
         <alt>
            <BNF name="character string literal"/>
         </alt>
         <alt>
            <BNF name="byte string literal"/>
         </alt>
         <alt>
            <BNF name="temporal literal"/>
         </alt>
         <alt>
            <BNF name="duration literal"/>
         </alt>
         <alt>
            <BNF name="null literal"/>
         </alt>
         <alt>
            <BNF name="list literal"/>
         </alt>
         <alt>
            <BNF name="record literal"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="boolean literal" predicative="no">
      <rhs>
         <alt>
            <kw>TRUE</kw>
         </alt>
         <alt>
            <kw>FALSE</kw>
         </alt>
         <alt>
            <kw>UNKNOWN</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="character string literal" predicative="no">
      <rhs>
         <alt>
            <BNF name="single quoted character sequence"/>
         </alt>
         <alt>
            <BNF name="double quoted character sequence"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="single quoted character sequence" predicative="no">
      <rhs>
         <opt>
            <BNF name="no escape"/>
         </opt>
         <BNF name="unbroken single quoted character sequence"/>
      </rhs>
   </BNFdef>
   <BNFdef name="double quoted character sequence" predicative="no">
      <rhs>
         <opt>
            <BNF name="no escape"/>
         </opt>
         <BNF name="unbroken double quoted character sequence"/>
      </rhs>
   </BNFdef>
   <BNFdef name="accent quoted character sequence" predicative="no">
      <rhs>
         <opt>
            <BNF name="no escape"/>
         </opt>
         <BNF name="unbroken accent quoted character sequence"/>
      </rhs>
   </BNFdef>
   <BNFdef name="no escape" predicative="no">
      <rhs>
         <BNF name="commercial at"/>
      </rhs>
   </BNFdef>
   <BNFdef name="unbroken single quoted character sequence" predicative="no">
      <rhs>
         <BNF name="quote"/>
         <opt>
            <BNF name="single quoted character representation"/>
            <repeat/>
         </opt>
         <BNF name="quote"/>
      </rhs>
   </BNFdef>
   <BNFdef name="unbroken double quoted character sequence" predicative="no">
      <rhs>
         <BNF name="double quote"/>
         <opt>
            <BNF name="double quoted character representation"/>
            <repeat/>
         </opt>
         <BNF name="double quote"/>
      </rhs>
   </BNFdef>
   <BNFdef name="unbroken accent quoted character sequence" predicative="no">
      <rhs>
         <BNF name="grave accent"/>
         <opt>
            <BNF name="accent quoted character representation"/>
            <repeat/>
         </opt>
         <BNF name="grave accent"/>
      </rhs>
   </BNFdef>
   <BNFdef name="single quoted character representation" predicative="no">
      <rhs>
         <alt>
            <BNF name="character representation"/>
         </alt>
         <alt>
            <BNF name="double single quote"/>
         </alt>
         <seeTheRules/>
      </rhs>
   </BNFdef>
   <BNFdef name="double quoted character representation" predicative="no">
      <rhs>
         <alt>
            <BNF name="character representation"/>
         </alt>
         <alt>
            <BNF name="double double quote"/>
         </alt>
         <seeTheRules/>
      </rhs>
   </BNFdef>
   <BNFdef name="accent quoted character representation" predicative="no">
      <rhs>
         <alt>
            <BNF name="character representation"/>
         </alt>
         <alt>
            <BNF name="double grave accent"/>
         </alt>
         <seeTheRules/>
      </rhs>
   </BNFdef>
   <BNFdef name="character representation" predicative="no">
      <rhs>
         <seeTheRules/>
      </rhs>
   </BNFdef>
   <BNFdef name="double single quote" predicative="no">
      <rhs>
         <BNF name="quote"/>
         <BNF name="quote"/>
         <seeTheRules/>
      </rhs>
   </BNFdef>
   <BNFdef name="double double quote" predicative="no">
      <rhs>
         <BNF name="double quote"/>
         <BNF name="double quote"/>
         <seeTheRules/>
      </rhs>
   </BNFdef>
   <BNFdef name="double grave accent" predicative="no">
      <rhs>
         <BNF name="grave accent"/>
         <BNF name="grave accent"/>
         <seeTheRules/>
      </rhs>
   </BNFdef>
   <BNFdef name="string literal character" predicative="no">
      <rhs>
         <seeTheRules/>
      </rhs>
   </BNFdef>
   <BNFdef name="escaped character" predicative="no">
      <rhs>
         <alt>
            <BNF name="escaped reverse solidus"/>
         </alt>
         <alt>
            <BNF name="escaped quote"/>
         </alt>
         <alt>
            <BNF name="escaped double quote"/>
         </alt>
         <alt>
            <BNF name="escaped grave accent"/>
         </alt>
         <alt>
            <BNF name="escaped tab"/>
         </alt>
         <alt>
            <BNF name="escaped backspace"/>
         </alt>
         <alt>
            <BNF name="escaped newline"/>
         </alt>
         <alt>
            <BNF name="escaped carriage return"/>
         </alt>
         <alt>
            <BNF name="escaped form feed"/>
         </alt>
         <alt>
            <BNF name="unicode escape value"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="escaped reverse solidus" predicative="no">
      <rhs>
         <BNF name="reverse solidus"/>
         <BNF name="reverse solidus"/>
      </rhs>
   </BNFdef>
   <BNFdef name="escaped quote" predicative="no">
      <rhs>
         <BNF name="reverse solidus"/>
         <BNF name="quote"/>
      </rhs>
   </BNFdef>
   <BNFdef name="escaped double quote" predicative="no">
      <rhs>
         <BNF name="reverse solidus"/>
         <BNF name="double quote"/>
      </rhs>
   </BNFdef>
   <BNFdef name="escaped grave accent" predicative="no">
      <rhs>
         <BNF name="reverse solidus"/>
         <BNF name="grave accent"/>
      </rhs>
   </BNFdef>
   <BNFdef name="escaped tab" predicative="no">
      <rhs>
         <BNF name="reverse solidus"/>
         <terminalsymbol>t</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="escaped backspace" predicative="no">
      <rhs>
         <BNF name="reverse solidus"/>
         <terminalsymbol>b</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="escaped newline" predicative="no">
      <rhs>
         <BNF name="reverse solidus"/>
         <terminalsymbol>n</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="escaped carriage return" predicative="no">
      <rhs>
         <BNF name="reverse solidus"/>
         <terminalsymbol>r</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="escaped form feed" predicative="no">
      <rhs>
         <BNF name="reverse solidus"/>
         <terminalsymbol>f</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="unicode escape value" predicative="no">
      <rhs>
         <alt>
            <BNF name="unicode 4 digit escape value"/>
         </alt>
         <alt>
            <BNF name="unicode 6 digit escape value"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="unicode 4 digit escape value" predicative="no">
      <rhs>
         <BNF name="reverse solidus"/>
         <terminalsymbol>u</terminalsymbol>
         <BNF name="hex digit"/>
         <BNF name="hex digit"/>
         <BNF name="hex digit"/>
         <BNF name="hex digit"/>
      </rhs>
   </BNFdef>
   <BNFdef name="unicode 6 digit escape value" predicative="no">
      <rhs>
         <BNF name="reverse solidus"/>
         <terminalsymbol>U</terminalsymbol>
         <BNF name="hex digit"/>
         <BNF name="hex digit"/>
         <BNF name="hex digit"/>
         <BNF name="hex digit"/>
         <BNF name="hex digit"/>
         <BNF name="hex digit"/>
      </rhs>
   </BNFdef>
   <BNFdef name="byte string literal" predicative="no">
      <rhs>
         <terminalsymbol>X</terminalsymbol>
         <BNF name="quote"/>
         <opt>
            <BNF name="space"/>
            <repeat/>
         </opt>
         <opt>
            <group>
               <BNF name="hex digit"/>
               <opt>
                  <BNF name="space"/>
                  <repeat/>
               </opt>
               <BNF name="hex digit"/>
               <opt>
                  <BNF name="space"/>
                  <repeat/>
               </opt>
            </group>
            <repeat/>
         </opt>
         <BNF name="quote"/>
         <opt>
            <group>
               <BNF name="separator"/>
               <BNF name="quote"/>
               <opt>
                  <BNF name="space"/>
                  <repeat/>
               </opt>
               <opt>
                  <group>
                     <BNF name="hex digit"/>
                     <opt>
                        <BNF name="space"/>
                        <repeat/>
                     </opt>
                     <BNF name="hex digit"/>
                     <opt>
                        <BNF name="space"/>
                        <repeat/>
                     </opt>
                  </group>
                  <repeat/>
               </opt>
               <BNF name="quote"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="signed numeric literal" predicative="no">
      <rhs>
         <opt>
            <BNF name="sign"/>
         </opt>
         <BNF name="unsigned numeric literal"/>
      </rhs>
   </BNFdef>
   <BNFdef name="sign" predicative="no">
      <rhs>
         <alt>
            <BNF name="plus sign"/>
         </alt>
         <alt>
            <BNF name="minus sign"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="unsigned numeric literal" predicative="no">
      <rhs>
         <alt>
            <BNF name="exact numeric literal"/>
         </alt>
         <alt>
            <BNF name="approximate numeric literal"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="exact numeric literal" predicative="no">
      <rhs>
         <alt>
            <BNF name="unsigned decimal in scientific notation"/>
            <BNF name="exact number suffix"/>
         </alt>
         <alt>
            <BNF name="unsigned decimal in common notation"/>
            <opt>
               <BNF name="exact number suffix"/>
            </opt>
         </alt>
         <alt>
            <BNF name="unsigned decimal integer"/>
            <BNF name="exact number suffix"/>
         </alt>
         <alt>
            <BNF name="unsigned integer"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="exact number suffix" predicative="no">
      <rhs>
         <terminalsymbol>M</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="unsigned decimal in scientific notation" predicative="no">
      <rhs>
         <BNF name="mantissa"/>
         <terminalsymbol>E</terminalsymbol>
         <BNF name="exponent"/>
         <seeTheRules/>
      </rhs>
   </BNFdef>
   <BNFdef name="mantissa" predicative="no">
      <rhs>
         <alt>
            <BNF name="unsigned decimal in common notation"/>
         </alt>
         <alt>
            <BNF name="unsigned decimal integer"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="exponent" predicative="no">
      <rhs>
         <BNF name="signed decimal integer"/>
      </rhs>
   </BNFdef>
   <BNFdef name="unsigned decimal in common notation" predicative="no">
      <rhs>
         <alt>
            <BNF name="unsigned decimal integer"/>
            <group>
               <BNF name="period"/>
               <opt>
                  <BNF name="unsigned decimal integer"/>
               </opt>
            </group>
         </alt>
         <alt>
            <BNF name="period"/>
            <BNF name="unsigned decimal integer"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="unsigned integer" predicative="no">
      <rhs>
         <alt>
            <BNF name="unsigned decimal integer"/>
         </alt>
         <alt>
            <BNF name="unsigned hexadecimal integer"/>
         </alt>
         <alt>
            <BNF name="unsigned octal integer"/>
         </alt>
         <alt>
            <BNF name="unsigned binary integer"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="signed decimal integer" predicative="no">
      <rhs>
         <opt>
            <BNF name="sign"/>
         </opt>
         <BNF name="unsigned decimal integer"/>
      </rhs>
   </BNFdef>
   <BNFdef name="unsigned decimal integer" predicative="no">
      <rhs>
         <BNF name="digit"/>
         <opt>
            <group>
               <opt>
                  <BNF name="underscore"/>
               </opt>
               <BNF name="digit"/>
            </group>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="unsigned hexadecimal integer" predicative="no">
      <rhs>
         <terminalsymbol>0x</terminalsymbol>
         <group>
            <opt>
               <BNF name="underscore"/>
            </opt>
            <BNF name="hex digit"/>
         </group>
         <repeat/>
      </rhs>
   </BNFdef>
   <BNFdef name="unsigned octal integer" predicative="no">
      <rhs>
         <terminalsymbol>0o</terminalsymbol>
         <group>
            <opt>
               <BNF name="underscore"/>
            </opt>
            <BNF name="octal digit"/>
         </group>
         <repeat/>
      </rhs>
   </BNFdef>
   <BNFdef name="unsigned binary integer" predicative="no">
      <rhs>
         <terminalsymbol>0b</terminalsymbol>
         <group>
            <opt>
               <BNF name="underscore"/>
            </opt>
            <BNF name="binary digit"/>
         </group>
         <repeat/>
      </rhs>
   </BNFdef>
   <BNFdef name="approximate numeric literal" predicative="no">
      <rhs>
         <alt>
            <BNF name="unsigned decimal in scientific notation"/>
            <opt>
               <BNF name="approximate number suffix"/>
            </opt>
         </alt>
         <alt>
            <BNF name="unsigned decimal in common notation"/>
            <BNF name="approximate number suffix"/>
         </alt>
         <alt>
            <BNF name="unsigned decimal integer"/>
            <BNF name="approximate number suffix"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="approximate number suffix" predicative="no">
      <rhs>
         <alt>
            <terminalsymbol>F</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>D</terminalsymbol>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="temporal literal" predicative="no">
      <rhs>
         <alt>
            <BNF name="date literal"/>
         </alt>
         <alt>
            <BNF name="time literal"/>
         </alt>
         <alt>
            <BNF name="datetime literal"/>
         </alt>
         <alt>
            <BNF name="SQL-datetime literal"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="date literal" predicative="no">
      <rhs>
         <kw>DATE</kw>
         <BNF name="date string"/>
      </rhs>
   </BNFdef>
   <BNFdef name="time literal" predicative="no">
      <rhs>
         <kw>TIME</kw>
         <BNF name="time string"/>
      </rhs>
   </BNFdef>
   <BNFdef name="datetime literal" predicative="no">
      <rhs>
         <group>
            <alt>
               <kw>DATETIME</kw>
            </alt>
            <alt>
               <kw>TIMESTAMP</kw>
            </alt>
         </group>
         <BNF name="datetime string"/>
      </rhs>
   </BNFdef>
   <BNFdef name="date string" predicative="no">
      <rhs>
         <BNF name="character string literal"/>
      </rhs>
   </BNFdef>
   <BNFdef name="time string" predicative="no">
      <rhs>
         <BNF name="character string literal"/>
      </rhs>
   </BNFdef>
   <BNFdef name="datetime string" predicative="no">
      <rhs>
         <BNF name="character string literal"/>
      </rhs>
   </BNFdef>
   <BNFdef name="time zone string" predicative="no">
      <rhs>
         <BNF name="character string literal"/>
      </rhs>
   </BNFdef>
   <BNFdef name="SQL-datetime literal" predicative="no">
      <rhs>
         <seeTheRules/>
      </rhs>
   </BNFdef>
   <BNFdef name="duration literal" predicative="no">
      <rhs>
         <alt>
            <kw>DURATION</kw>
            <BNF name="duration string"/>
         </alt>
         <alt>
            <BNF name="SQL-interval literal"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="duration string" predicative="no">
      <rhs>
         <BNF name="character string literal"/>
      </rhs>
   </BNFdef>
   <BNFdef name="iso8601 years and months" predicative="no">
      <rhs>
         <terminalsymbol>P</terminalsymbol>
         <opt>
            <BNF name="iso8601 years"/>
         </opt>
         <opt>
            <BNF name="iso8601 months"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="iso8601 years" predicative="no">
      <rhs>
         <BNF name="iso8601 sint"/>
         <terminalsymbol>Y</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="iso8601 months" predicative="no">
      <rhs>
         <BNF name="iso8601 sint"/>
         <terminalsymbol>M</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="iso8601 days" predicative="no">
      <rhs>
         <BNF name="iso8601 sint"/>
         <terminalsymbol>D</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="iso8601 days and time" predicative="no">
      <rhs>
         <terminalsymbol>P</terminalsymbol>
         <opt>
            <BNF name="iso8601 days"/>
         </opt>
         <terminalsymbol>T</terminalsymbol>
         <opt>
            <BNF name="iso8601 hours"/>
         </opt>
         <opt>
            <BNF name="iso8601 minutes"/>
         </opt>
         <opt>
            <BNF name="iso8601 seconds"/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="iso8601 hours" predicative="no">
      <rhs>
         <BNF name="iso8601 sint"/>
         <terminalsymbol>H</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="iso8601 minutes" predicative="no">
      <rhs>
         <BNF name="iso8601 sint"/>
         <terminalsymbol>M</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="iso8601 seconds" predicative="no">
      <rhs>
         <BNF name="iso8601 sint"/>
         <opt>
            <BNF name="period"/>
            <BNF name="iso8601 uint"/>
         </opt>
         <terminalsymbol>S</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="iso8601 sint" predicative="no">
      <rhs>
         <opt>
            <BNF name="minus sign"/>
         </opt>
         <BNF name="unsigned decimal integer"/>
      </rhs>
   </BNFdef>
   <BNFdef name="iso8601 uint" predicative="no">
      <rhs>
         <BNF name="unsigned decimal integer"/>
      </rhs>
   </BNFdef>
   <BNFdef name="SQL-interval literal" predicative="no">
      <rhs>
         <seeTheRules/>
      </rhs>
   </BNFdef>
   <BNFdef name="null literal" predicative="no">
      <rhs>
         <kw>NULL</kw>
      </rhs>
   </BNFdef>
   <BNFdef name="list literal" predicative="no">
      <rhs>
         <BNF name="list value constructor by enumeration"/>
      </rhs>
   </BNFdef>
   <BNFdef name="record literal" predicative="no">
      <rhs>
         <BNF name="record constructor"/>
      </rhs>
   </BNFdef>
   <BNFdef name="token" predicative="no">
      <rhs>
         <alt>
            <BNF name="non-delimiter token"/>
         </alt>
         <alt>
            <BNF name="delimiter token"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="non-delimiter token" predicative="no">
      <rhs>
         <alt>
            <BNF name="regular identifier"/>
         </alt>
         <alt>
            <BNF name="substituted parameter reference"/>
         </alt>
         <alt>
            <BNF name="general parameter reference"/>
         </alt>
         <alt>
            <BNF name="keyword"/>
         </alt>
         <alt>
            <BNF name="unsigned numeric literal"/>
         </alt>
         <alt>
            <BNF name="byte string literal"/>
         </alt>
         <alt>
            <BNF name="multiset alternation operator"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="identifier" predicative="no">
      <rhs>
         <alt>
            <BNF name="regular identifier"/>
         </alt>
         <alt>
            <BNF name="delimited identifier"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="separated identifier" predicative="no">
      <rhs>
         <alt>
            <BNF name="extended identifier"/>
         </alt>
         <alt>
            <BNF name="delimited identifier"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="non-delimited identifier" predicative="no">
      <rhs>
         <alt>
            <BNF name="regular identifier"/>
         </alt>
         <alt>
            <BNF name="extended identifier"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="regular identifier" predicative="no">
      <rhs>
         <BNF name="identifier start"/>
         <opt>
            <BNF name="identifier extend"/>
            <repeat/>
         </opt>
      </rhs>
   </BNFdef>
   <BNFdef name="extended identifier" predicative="no">
      <rhs>
         <BNF name="identifier extend"/>
         <repeat/>
      </rhs>
   </BNFdef>
   <BNFdef name="delimited identifier" predicative="no">
      <rhs>
         <alt>
            <BNF name="double quoted character sequence"/>
         </alt>
         <alt>
            <BNF name="accent quoted character sequence"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="identifier start" predicative="no">
      <rhs>
         <seeTheRules/>
      </rhs>
   </BNFdef>
   <BNFdef name="identifier extend" predicative="no">
      <rhs>
         <seeTheRules/>
      </rhs>
   </BNFdef>
   <BNFdef name="substituted parameter reference" predicative="no">
      <rhs>
         <BNF name="double dollar sign"/>
         <BNF name="parameter name"/>
      </rhs>
   </BNFdef>
   <BNFdef name="general parameter reference" predicative="no">
      <rhs>
         <BNF name="dollar sign"/>
         <BNF name="parameter name"/>
      </rhs>
   </BNFdef>
   <BNFdef name="keyword" predicative="no">
      <rhs>
         <alt>
            <BNF name="reserved word"/>
         </alt>
         <alt>
            <BNF name="non-reserved word"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="reserved word" predicative="no">
      <rhs>
         <alt>
            <BNF name="pre-reserved word"/>
         </alt>
         <alt>
            <kw>ABS</kw>
         </alt>
         <alt>
            <kw>ACOS</kw>
         </alt>
         <alt>
            <kw>ALL</kw>
         </alt>
         <alt>
            <kw>ALL_DIFFERENT</kw>
         </alt>
         <alt>
            <kw>AND</kw>
         </alt>
         <alt>
            <kw>ANY</kw>
         </alt>
         <alt>
            <kw>ARRAY</kw>
         </alt>
         <alt>
            <kw>AS</kw>
         </alt>
         <alt>
            <kw>ASC</kw>
         </alt>
         <alt>
            <kw>ASCENDING</kw>
         </alt>
         <alt>
            <kw>ASIN</kw>
         </alt>
         <alt>
            <kw>AT</kw>
         </alt>
         <alt>
            <kw>ATAN</kw>
         </alt>
         <alt>
            <kw>AVG</kw>
         </alt>
         <alt>
            <kw>BIG</kw>
         </alt>
         <alt>
            <kw>BIGINT</kw>
         </alt>
         <alt>
            <kw>BINARY</kw>
         </alt>
         <alt>
            <kw>BOOL</kw>
         </alt>
         <alt>
            <kw>BOOLEAN</kw>
         </alt>
         <alt>
            <kw>BOTH</kw>
         </alt>
         <alt>
            <kw>BTRIM</kw>
         </alt>
         <alt>
            <kw>BY</kw>
         </alt>
         <alt>
            <kw>BYTE_LENGTH</kw>
         </alt>
         <alt>
            <kw>BYTES</kw>
         </alt>
         <alt>
            <kw>CALL</kw>
         </alt>
         <alt>
            <kw>CARDINALITY</kw>
         </alt>
         <alt>
            <kw>CASE</kw>
         </alt>
         <alt>
            <kw>CAST</kw>
         </alt>
         <alt>
            <kw>CEIL</kw>
         </alt>
         <alt>
            <kw>CEILING</kw>
         </alt>
         <alt>
            <kw>CHAR</kw>
         </alt>
         <alt>
            <kw>CHAR_LENGTH</kw>
         </alt>
         <alt>
            <kw>CHARACTER_LENGTH</kw>
         </alt>
         <alt>
            <kw>CHARACTERISTICS</kw>
         </alt>
         <alt>
            <kw>CLOSE</kw>
         </alt>
         <alt>
            <kw>COALESCE</kw>
         </alt>
         <alt>
            <kw>COLLECT_LIST</kw>
         </alt>
         <alt>
            <kw>COMMIT</kw>
         </alt>
         <alt>
            <kw>COPY</kw>
         </alt>
         <alt>
            <kw>COS</kw>
         </alt>
         <alt>
            <kw>COSH</kw>
         </alt>
         <alt>
            <kw>COT</kw>
         </alt>
         <alt>
            <kw>COUNT</kw>
         </alt>
         <alt>
            <kw>CREATE</kw>
         </alt>
         <alt>
            <kw>CURRENT_DATE</kw>
         </alt>
         <alt>
            <kw>CURRENT_GRAPH</kw>
         </alt>
         <alt>
            <kw>CURRENT_PROPERTY_GRAPH</kw>
         </alt>
         <alt>
            <kw>CURRENT_SCHEMA</kw>
         </alt>
         <alt>
            <kw>CURRENT_TIME</kw>
         </alt>
         <alt>
            <kw>CURRENT_TIMESTAMP</kw>
         </alt>
         <alt>
            <kw>DATE</kw>
         </alt>
         <alt>
            <kw>DATETIME</kw>
         </alt>
         <alt>
            <kw>DAY</kw>
         </alt>
         <alt>
            <kw>DEC</kw>
         </alt>
         <alt>
            <kw>DECIMAL</kw>
         </alt>
         <alt>
            <kw>DEGREES</kw>
         </alt>
         <alt>
            <kw>DELETE</kw>
         </alt>
         <alt>
            <kw>DESC</kw>
         </alt>
         <alt>
            <kw>DESCENDING</kw>
         </alt>
         <alt>
            <kw>DETACH</kw>
         </alt>
         <alt>
            <kw>DISTINCT</kw>
         </alt>
         <alt>
            <kw>DOUBLE</kw>
         </alt>
         <alt>
            <kw>DROP</kw>
         </alt>
         <alt>
            <kw>DURATION</kw>
         </alt>
         <alt>
            <kw>DURATION_BETWEEN</kw>
         </alt>
         <alt>
            <kw>ELEMENT_ID</kw>
         </alt>
         <alt>
            <kw>ELSE</kw>
         </alt>
         <alt>
            <kw>END</kw>
         </alt>
         <alt>
            <kw>EXCEPT</kw>
         </alt>
         <alt>
            <kw>EXISTS</kw>
         </alt>
         <alt>
            <kw>EXP</kw>
         </alt>
         <alt>
            <kw>FALSE</kw>
         </alt>
         <alt>
            <kw>FILTER</kw>
         </alt>
         <alt>
            <kw>FINISH</kw>
         </alt>
         <alt>
            <kw>FLOAT</kw>
         </alt>
         <alt>
            <kw>FLOAT16</kw>
         </alt>
         <alt>
            <kw>FLOAT32</kw>
         </alt>
         <alt>
            <kw>FLOAT64</kw>
         </alt>
         <alt>
            <kw>FLOAT128</kw>
         </alt>
         <alt>
            <kw>FLOAT256</kw>
         </alt>
         <alt>
            <kw>FLOOR</kw>
         </alt>
         <alt>
            <kw>FOR</kw>
         </alt>
         <alt>
            <kw>FROM</kw>
         </alt>
         <alt>
            <kw>GROUP</kw>
         </alt>
         <alt>
            <kw>HAVING</kw>
         </alt>
         <alt>
            <kw>HOME_GRAPH</kw>
         </alt>
         <alt>
            <kw>HOME_PROPERTY_GRAPH</kw>
         </alt>
         <alt>
            <kw>HOME_SCHEMA</kw>
         </alt>
         <alt>
            <kw>HOUR</kw>
         </alt>
         <alt>
            <kw>IF</kw>
         </alt>
         <alt>
            <kw>IMPLIES</kw>
         </alt>
         <alt>
            <kw>IN</kw>
         </alt>
         <alt>
            <kw>INSERT</kw>
         </alt>
         <alt>
            <kw>INT</kw>
         </alt>
         <alt>
            <kw>INTEGER</kw>
         </alt>
         <alt>
            <kw>INT8</kw>
         </alt>
         <alt>
            <kw>INTEGER8</kw>
         </alt>
         <alt>
            <kw>INT16</kw>
         </alt>
         <alt>
            <kw>INTEGER16</kw>
         </alt>
         <alt>
            <kw>INT32</kw>
         </alt>
         <alt>
            <kw>INTEGER32</kw>
         </alt>
         <alt>
            <kw>INT64</kw>
         </alt>
         <alt>
            <kw>INTEGER64</kw>
         </alt>
         <alt>
            <kw>INT128</kw>
         </alt>
         <alt>
            <kw>INTEGER128</kw>
         </alt>
         <alt>
            <kw>INT256</kw>
         </alt>
         <alt>
            <kw>INTEGER256</kw>
         </alt>
         <alt>
            <kw>INTERSECT</kw>
         </alt>
         <alt>
            <kw>INTERVAL</kw>
         </alt>
         <alt>
            <kw>IS</kw>
         </alt>
         <alt>
            <kw>LEADING</kw>
         </alt>
         <alt>
            <kw>LEFT</kw>
         </alt>
         <alt>
            <kw>LET</kw>
         </alt>
         <alt>
            <kw>LIKE</kw>
         </alt>
         <alt>
            <kw>LIMIT</kw>
         </alt>
         <alt>
            <kw>LIST</kw>
         </alt>
         <alt>
            <kw>LN</kw>
         </alt>
         <alt>
            <kw>LOCAL</kw>
         </alt>
         <alt>
            <kw>LOCAL_DATETIME</kw>
         </alt>
         <alt>
            <kw>LOCAL_TIME</kw>
         </alt>
         <alt>
            <kw>LOCAL_TIMESTAMP</kw>
         </alt>
         <alt>
            <kw>LOG</kw>
         </alt>
         <alt>
            <kw>LOG10</kw>
         </alt>
         <alt>
            <kw>LOWER</kw>
         </alt>
         <alt>
            <kw>LTRIM</kw>
         </alt>
         <alt>
            <kw>MATCH</kw>
         </alt>
         <alt>
            <kw>MAX</kw>
         </alt>
         <alt>
            <kw>MIN</kw>
         </alt>
         <alt>
            <kw>MINUTE</kw>
         </alt>
         <alt>
            <kw>MOD</kw>
         </alt>
         <alt>
            <kw>MONTH</kw>
         </alt>
         <alt>
            <kw>NEXT</kw>
         </alt>
         <alt>
            <kw>NODETACH</kw>
         </alt>
         <alt>
            <kw>NORMALIZE</kw>
         </alt>
         <alt>
            <kw>NOT</kw>
         </alt>
         <alt>
            <kw>NOTHING</kw>
         </alt>
         <alt>
            <kw>NULL</kw>
         </alt>
         <alt>
            <kw>NULLS</kw>
         </alt>
         <alt>
            <kw>NULLIF</kw>
         </alt>
         <alt>
            <kw>OCTET_LENGTH</kw>
         </alt>
         <alt>
            <kw>OF</kw>
         </alt>
         <alt>
            <kw>OFFSET</kw>
         </alt>
         <alt>
            <kw>OPTIONAL</kw>
         </alt>
         <alt>
            <kw>OR</kw>
         </alt>
         <alt>
            <kw>ORDER</kw>
         </alt>
         <alt>
            <kw>OTHERWISE</kw>
         </alt>
         <alt>
            <kw>PARAMETER</kw>
         </alt>
         <alt>
            <kw>PARAMETERS</kw>
         </alt>
         <alt>
            <kw>PATH</kw>
         </alt>
         <alt>
            <kw>PATH_LENGTH</kw>
         </alt>
         <alt>
            <kw>PATHS</kw>
         </alt>
         <alt>
            <kw>PERCENTILE_CONT</kw>
         </alt>
         <alt>
            <kw>PERCENTILE_DISC</kw>
         </alt>
         <alt>
            <kw>POWER</kw>
         </alt>
         <alt>
            <kw>PRECISION</kw>
         </alt>
         <alt>
            <kw>PROPERTY_EXISTS</kw>
         </alt>
         <alt>
            <kw>RADIANS</kw>
         </alt>
         <alt>
            <kw>REAL</kw>
         </alt>
         <alt>
            <kw>RECORD</kw>
         </alt>
         <alt>
            <kw>REMOVE</kw>
         </alt>
         <alt>
            <kw>REPLACE</kw>
         </alt>
         <alt>
            <kw>RESET</kw>
         </alt>
         <alt>
            <kw>RETURN</kw>
         </alt>
         <alt>
            <kw>RIGHT</kw>
         </alt>
         <alt>
            <kw>ROLLBACK</kw>
         </alt>
         <alt>
            <kw>RTRIM</kw>
         </alt>
         <alt>
            <kw>SAME</kw>
         </alt>
         <alt>
            <kw>SCHEMA</kw>
         </alt>
         <alt>
            <kw>SECOND</kw>
         </alt>
         <alt>
            <kw>SELECT</kw>
         </alt>
         <alt>
            <kw>SESSION</kw>
         </alt>
         <alt>
            <kw>SESSION_USER</kw>
         </alt>
         <alt>
            <kw>SET</kw>
         </alt>
         <alt>
            <kw>SIGNED</kw>
         </alt>
         <alt>
            <kw>SIN</kw>
         </alt>
         <alt>
            <kw>SINH</kw>
         </alt>
         <alt>
            <kw>SIZE</kw>
         </alt>
         <alt>
            <kw>SKIP</kw>
         </alt>
         <alt>
            <kw>SMALL</kw>
         </alt>
         <alt>
            <kw>SMALLINT</kw>
         </alt>
         <alt>
            <kw>SQRT</kw>
         </alt>
         <alt>
            <kw>START</kw>
         </alt>
         <alt>
            <kw>STDDEV_POP</kw>
         </alt>
         <alt>
            <kw>STDDEV_SAMP</kw>
         </alt>
         <alt>
            <kw>STRING</kw>
         </alt>
         <alt>
            <kw>SUM</kw>
         </alt>
         <alt>
            <kw>TAN</kw>
         </alt>
         <alt>
            <kw>TANH</kw>
         </alt>
         <alt>
            <kw>THEN</kw>
         </alt>
         <alt>
            <kw>TIME</kw>
         </alt>
         <alt>
            <kw>TIMESTAMP</kw>
         </alt>
         <alt>
            <kw>TRAILING</kw>
         </alt>
         <alt>
            <kw>TRIM</kw>
         </alt>
         <alt>
            <kw>TRUE</kw>
         </alt>
         <alt>
            <kw>TYPED</kw>
         </alt>
         <alt>
            <kw>UBIGINT</kw>
         </alt>
         <alt>
            <kw>UINT</kw>
         </alt>
         <alt>
            <kw>UINT8</kw>
         </alt>
         <alt>
            <kw>UINT16</kw>
         </alt>
         <alt>
            <kw>UINT32</kw>
         </alt>
         <alt>
            <kw>UINT64</kw>
         </alt>
         <alt>
            <kw>UINT128</kw>
         </alt>
         <alt>
            <kw>UINT256</kw>
         </alt>
         <alt>
            <kw>UNION</kw>
         </alt>
         <alt>
            <kw>UNKNOWN</kw>
         </alt>
         <alt>
            <kw>UNSIGNED</kw>
         </alt>
         <alt>
            <kw>UPPER</kw>
         </alt>
         <alt>
            <kw>USE</kw>
         </alt>
         <alt>
            <kw>USMALLINT</kw>
         </alt>
         <alt>
            <kw>VALUE</kw>
         </alt>
         <alt>
            <kw>VARBINARY</kw>
         </alt>
         <alt>
            <kw>VARCHAR</kw>
         </alt>
         <alt>
            <kw>VARIABLE</kw>
         </alt>
         <alt>
            <kw>WHEN</kw>
         </alt>
         <alt>
            <kw>WHERE</kw>
         </alt>
         <alt>
            <kw>WITH</kw>
         </alt>
         <alt>
            <kw>XOR</kw>
         </alt>
         <alt>
            <kw>YEAR</kw>
         </alt>
         <alt>
            <kw>YIELD</kw>
         </alt>
         <alt>
            <kw>ZONED</kw>
         </alt>
         <alt>
            <kw>ZONED_DATETIME</kw>
         </alt>
         <alt>
            <kw>ZONED_TIME</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="pre-reserved word" predicative="no">
      <rhs>
         <alt>
            <kw>ABSTRACT</kw>
         </alt>
         <alt>
            <kw>AGGREGATE</kw>
         </alt>
         <alt>
            <kw>AGGREGATES</kw>
         </alt>
         <alt>
            <kw>ALTER</kw>
         </alt>
         <alt>
            <kw>CATALOG</kw>
         </alt>
         <alt>
            <kw>CLEAR</kw>
         </alt>
         <alt>
            <kw>CLONE</kw>
         </alt>
         <alt>
            <kw>CONSTRAINT</kw>
         </alt>
         <alt>
            <kw>CURRENT_ROLE</kw>
         </alt>
         <alt>
            <kw>CURRENT_USER</kw>
         </alt>
         <alt>
            <kw>DATA</kw>
         </alt>
         <alt>
            <kw>DIRECTORY</kw>
         </alt>
         <alt>
            <kw>DRYRUN</kw>
         </alt>
         <alt>
            <kw>EXACT</kw>
         </alt>
         <alt>
            <kw>EXISTING</kw>
         </alt>
         <alt>
            <kw>FUNCTION</kw>
         </alt>
         <alt>
            <kw>GQLSTATUS</kw>
         </alt>
         <alt>
            <kw>GRANT</kw>
         </alt>
         <alt>
            <kw>INSTANT</kw>
         </alt>
         <alt>
            <kw>INFINITY</kw>
         </alt>
         <alt>
            <kw>NUMBER</kw>
         </alt>
         <alt>
            <kw>NUMERIC</kw>
         </alt>
         <alt>
            <kw>ON</kw>
         </alt>
         <alt>
            <kw>OPEN</kw>
         </alt>
         <alt>
            <kw>PARTITION</kw>
         </alt>
         <alt>
            <kw>PROCEDURE</kw>
         </alt>
         <alt>
            <kw>PRODUCT</kw>
         </alt>
         <alt>
            <kw>PROJECT</kw>
         </alt>
         <alt>
            <kw>QUERY</kw>
         </alt>
         <alt>
            <kw>RECORDS</kw>
         </alt>
         <alt>
            <kw>REFERENCE</kw>
         </alt>
         <alt>
            <kw>RENAME</kw>
         </alt>
         <alt>
            <kw>REVOKE</kw>
         </alt>
         <alt>
            <kw>SUBSTRING</kw>
         </alt>
         <alt>
            <kw>SYSTEM_USER</kw>
         </alt>
         <alt>
            <kw>TEMPORAL</kw>
         </alt>
         <alt>
            <kw>UNIQUE</kw>
         </alt>
         <alt>
            <kw>UNIT</kw>
         </alt>
         <alt>
            <kw>VALUES</kw>
         </alt>
         <alt>
            <kw>WHITESPACE</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="non-reserved word" predicative="no">
      <rhs>
         <alt>
            <kw>ACYCLIC</kw>
         </alt>
         <alt>
            <kw>BINDING</kw>
         </alt>
         <alt>
            <kw>BINDINGS</kw>
         </alt>
         <alt>
            <kw>CONNECTING</kw>
         </alt>
         <alt>
            <kw>DESTINATION</kw>
         </alt>
         <alt>
            <kw>DIFFERENT</kw>
         </alt>
         <alt>
            <kw>DIRECTED</kw>
         </alt>
         <alt>
            <kw>EDGE</kw>
         </alt>
         <alt>
            <kw>EDGES</kw>
         </alt>
         <alt>
            <kw>ELEMENT</kw>
         </alt>
         <alt>
            <kw>ELEMENTS</kw>
         </alt>
         <alt>
            <kw>FIRST</kw>
         </alt>
         <alt>
            <kw>GRAPH</kw>
         </alt>
         <alt>
            <kw>GROUPS</kw>
         </alt>
         <alt>
            <kw>KEEP</kw>
         </alt>
         <alt>
            <kw>LABEL</kw>
         </alt>
         <alt>
            <kw>LABELED</kw>
         </alt>
         <alt>
            <kw>LABELS</kw>
         </alt>
         <alt>
            <kw>LAST</kw>
         </alt>
         <alt>
            <kw>NFC</kw>
         </alt>
         <alt>
            <kw>NFD</kw>
         </alt>
         <alt>
            <kw>NFKC</kw>
         </alt>
         <alt>
            <kw>NFKD</kw>
         </alt>
         <alt>
            <kw>NO</kw>
         </alt>
         <alt>
            <kw>NODE</kw>
         </alt>
         <alt>
            <kw>NORMALIZED</kw>
         </alt>
         <alt>
            <kw>ONLY</kw>
         </alt>
         <alt>
            <kw>ORDINALITY</kw>
         </alt>
         <alt>
            <kw>PROPERTY</kw>
         </alt>
         <alt>
            <kw>READ</kw>
         </alt>
         <alt>
            <kw>RELATIONSHIP</kw>
         </alt>
         <alt>
            <kw>RELATIONSHIPS</kw>
         </alt>
         <alt>
            <kw>REPEATABLE</kw>
         </alt>
         <alt>
            <kw>SHORTEST</kw>
         </alt>
         <alt>
            <kw>SIMPLE</kw>
         </alt>
         <alt>
            <kw>SOURCE</kw>
         </alt>
         <alt>
            <kw>TABLE</kw>
         </alt>
         <alt>
            <kw>TEMP</kw>
         </alt>
         <alt>
            <kw>TO</kw>
         </alt>
         <alt>
            <kw>TRAIL</kw>
         </alt>
         <alt>
            <kw>TRANSACTION</kw>
         </alt>
         <alt>
            <kw>TYPE</kw>
         </alt>
         <alt>
            <kw>UNDIRECTED</kw>
         </alt>
         <alt>
            <kw>VERTEX</kw>
         </alt>
         <alt>
            <kw>WALK</kw>
         </alt>
         <alt>
            <kw>WITHOUT</kw>
         </alt>
         <alt>
            <kw>WRITE</kw>
         </alt>
         <alt>
            <kw>ZONE</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="multiset alternation operator" predicative="no">
      <rhs>
         <terminalsymbol unicode="007C,002B,007C">|+|</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="delimiter token" predicative="no">
      <rhs>
         <alt>
            <BNF name="GQL special character"/>
         </alt>
         <alt>
            <BNF name="bracket right arrow"/>
         </alt>
         <alt>
            <BNF name="bracket tilde right arrow"/>
         </alt>
         <alt>
            <BNF name="character string literal"/>
         </alt>
         <alt>
            <BNF name="concatenation operator"/>
         </alt>
         <alt>
            <BNF name="date string"/>
         </alt>
         <alt>
            <BNF name="datetime string"/>
         </alt>
         <alt>
            <BNF name="delimited identifier"/>
         </alt>
         <alt>
            <BNF name="double colon"/>
         </alt>
         <alt>
            <BNF name="double period"/>
         </alt>
         <alt>
            <BNF name="duration string"/>
         </alt>
         <alt>
            <BNF name="greater than operator"/>
         </alt>
         <alt>
            <BNF name="greater than or equals operator"/>
         </alt>
         <alt>
            <BNF name="left arrow"/>
         </alt>
         <alt>
            <BNF name="left arrow bracket"/>
         </alt>
         <alt>
            <BNF name="left arrow tilde"/>
         </alt>
         <alt>
            <BNF name="left arrow tilde bracket"/>
         </alt>
         <alt>
            <BNF name="left minus right"/>
         </alt>
         <alt>
            <BNF name="left minus slash"/>
         </alt>
         <alt>
            <BNF name="left tilde slash"/>
         </alt>
         <alt>
            <BNF name="less than operator"/>
         </alt>
         <alt>
            <BNF name="less than or equals operator"/>
         </alt>
         <alt>
            <BNF name="minus left bracket"/>
         </alt>
         <alt>
            <BNF name="minus slash"/>
         </alt>
         <alt>
            <BNF name="not equals operator"/>
         </alt>
         <alt>
            <BNF name="right arrow"/>
         </alt>
         <alt>
            <BNF name="right bracket minus"/>
         </alt>
         <alt>
            <BNF name="right bracket tilde"/>
         </alt>
         <alt>
            <BNF name="right double arrow"/>
         </alt>
         <alt>
            <BNF name="slash minus"/>
         </alt>
         <alt>
            <BNF name="slash minus right"/>
         </alt>
         <alt>
            <BNF name="slash tilde"/>
         </alt>
         <alt>
            <BNF name="slash tilde right"/>
         </alt>
         <alt>
            <BNF name="tilde left bracket"/>
         </alt>
         <alt>
            <BNF name="tilde right arrow"/>
         </alt>
         <alt>
            <BNF name="tilde slash"/>
         </alt>
         <alt>
            <BNF name="time string"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="bracket right arrow" predicative="no">
      <rhs>
         <terminalsymbol unicode="005D, 002D, 003E">]-&gt;</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="bracket tilde right arrow" predicative="no">
      <rhs>
         <terminalsymbol unicode="005D, 007E, 003E">]~&gt;</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="concatenation operator" predicative="no">
      <rhs>
         <terminalsymbol unicode="007C, 007C">||</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="double colon" predicative="no">
      <rhs>
         <terminalsymbol unicode="003A, 003A">::</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="double dollar sign" predicative="no">
      <rhs>
         <terminalsymbol unicode="0024, 0024">$$</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="double minus sign" predicative="no">
      <rhs>
         <terminalsymbol unicode="002D, 002D">--</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="double period" predicative="no">
      <rhs>
         <terminalsymbol unicode="002E, 002E">..</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="greater than operator" predicative="no">
      <rhs>
         <BNF name="right angle bracket"/>
      </rhs>
   </BNFdef>
   <BNFdef name="greater than or equals operator" predicative="no">
      <rhs>
         <terminalsymbol unicode="003E, 003D">&gt;=</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="left arrow" predicative="no">
      <rhs>
         <terminalsymbol unicode="003C, 002D">&lt;-</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="left arrow tilde" predicative="no">
      <rhs>
         <terminalsymbol unicode="003C, 007E">&lt;~</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="left arrow bracket" predicative="no">
      <rhs>
         <terminalsymbol unicode="003C, 002D, 005B">&lt;-[</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="left arrow tilde bracket" predicative="no">
      <rhs>
         <terminalsymbol unicode="003C, 007E, 005B">&lt;~[</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="left minus right" predicative="no">
      <rhs>
         <terminalsymbol unicode="003C, 002D, 003E">&lt;-&gt;</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="left minus slash" predicative="no">
      <rhs>
         <terminalsymbol unicode="003C, 002D, 002F">&lt;-/</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="left tilde slash" predicative="no">
      <rhs>
         <terminalsymbol unicode="003C, 007E, 002F">&lt;~/</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="less than operator" predicative="no">
      <rhs>
         <BNF name="left angle bracket"/>
      </rhs>
   </BNFdef>
   <BNFdef name="less than or equals operator" predicative="no">
      <rhs>
         <terminalsymbol unicode="003C, 003D">&lt;=</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="minus left bracket" predicative="no">
      <rhs>
         <terminalsymbol unicode="002D, 005B">-[</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="minus slash" predicative="no">
      <rhs>
         <terminalsymbol unicode="002D, 002F">-/</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="not equals operator" predicative="no">
      <rhs>
         <terminalsymbol unicode="003C, 003E">&lt;&gt;</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="right arrow" predicative="no">
      <rhs>
         <terminalsymbol unicode="002D, 003E">-&gt;</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="right bracket minus" predicative="no">
      <rhs>
         <terminalsymbol unicode="005D, 002D">]-</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="right bracket tilde" predicative="no">
      <rhs>
         <terminalsymbol unicode="005D, 007E">]~</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="right double arrow" predicative="no">
      <rhs>
         <terminalsymbol unicode="003D, 003E">=&gt;</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="slash minus" predicative="no">
      <rhs>
         <terminalsymbol unicode="002F, 002D">/-</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="slash minus right" predicative="no">
      <rhs>
         <terminalsymbol unicode="002F, 002D, 003E">/-&gt;</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="slash tilde" predicative="no">
      <rhs>
         <terminalsymbol unicode="002F, 007E">/~</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="slash tilde right" predicative="no">
      <rhs>
         <terminalsymbol unicode="002F, 007E, 003E">/~&gt;</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="tilde left bracket" predicative="no">
      <rhs>
         <terminalsymbol unicode="007E,005B">~[</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="tilde right arrow" predicative="no">
      <rhs>
         <terminalsymbol unicode="007E,003E">~&gt;</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="tilde slash" predicative="no">
      <rhs>
         <terminalsymbol unicode="007E, 002F">~/</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="double solidus" predicative="no">
      <rhs>
         <terminalsymbol unicode="002F, 002F">//</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="separator" predicative="no">
      <rhs>
         <group>
            <alt>
               <BNF name="comment"/>
            </alt>
            <alt>
               <BNF name="whitespace"/>
            </alt>
         </group>
         <repeat/>
      </rhs>
   </BNFdef>
   <BNFdef name="whitespace" predicative="no">
      <rhs>
         <seeTheRules/>
      </rhs>
   </BNFdef>
   <BNFdef name="truncating whitespace" predicative="no">
      <rhs>
         <seeTheRules/>
      </rhs>
   </BNFdef>
   <BNFdef name="bidirectional control character" predicative="no">
      <rhs>
         <seeTheRules/>
      </rhs>
   </BNFdef>
   <BNFdef name="comment" predicative="no">
      <rhs>
         <alt>
            <BNF name="simple comment"/>
         </alt>
         <alt>
            <BNF name="bracketed comment"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="simple comment" predicative="no">
      <rhs>
         <BNF name="simple comment introducer"/>
         <opt>
            <BNF name="simple comment character"/>
            <repeat/>
         </opt>
         <BNF name="newline"/>
      </rhs>
   </BNFdef>
   <BNFdef name="simple comment introducer" predicative="no">
      <rhs>
         <alt>
            <BNF name="double solidus"/>
         </alt>
         <alt>
            <BNF name="double minus sign"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="simple comment character" predicative="no">
      <rhs>
         <seeTheRules/>
      </rhs>
   </BNFdef>
   <BNFdef name="bracketed comment" predicative="no">
      <rhs>
         <BNF name="bracketed comment introducer"/>
         <BNF name="bracketed comment contents"/>
         <BNF name="bracketed comment terminator"/>
      </rhs>
   </BNFdef>
   <BNFdef name="bracketed comment introducer" predicative="no">
      <rhs>
         <terminalsymbol unicode="002F, 002A">/*</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="bracketed comment terminator" predicative="no">
      <rhs>
         <terminalsymbol unicode="002A, 002F">*/</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="bracketed comment contents" predicative="no">
      <rhs>
         <seeTheRules/>
      </rhs>
   </BNFdef>
   <BNFdef name="newline" predicative="no">
      <rhs>
         <seeTheRules/>
      </rhs>
   </BNFdef>
   <BNFdef name="edge synonym" predicative="no">
      <rhs>
         <alt>
            <kw>EDGE</kw>
         </alt>
         <alt>
            <kw>RELATIONSHIP</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="edges synonym" predicative="no">
      <rhs>
         <alt>
            <kw>EDGES</kw>
         </alt>
         <alt>
            <kw>RELATIONSHIPS</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="node synonym" predicative="no">
      <rhs>
         <alt>
            <kw>NODE</kw>
         </alt>
         <alt>
            <kw>VERTEX</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="implies" predicative="no">
      <rhs>
         <alt>
            <BNF name="right double arrow"/>
         </alt>
         <alt>
            <kw>IMPLIES</kw>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="GQL terminal character" predicative="no">
      <rhs>
         <alt>
            <BNF name="GQL language character"/>
         </alt>
         <alt>
            <BNF name="other language character"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="GQL language character" predicative="no">
      <rhs>
         <alt>
            <BNF name="simple Latin letter"/>
         </alt>
         <alt>
            <BNF name="digit"/>
         </alt>
         <alt>
            <BNF name="GQL special character"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="simple Latin letter" predicative="no">
      <rhs>
         <alt>
            <BNF name="simple Latin lower-case letter"/>
         </alt>
         <alt>
            <BNF name="simple Latin upper-case letter"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="simple Latin lower-case letter" predicative="no">
      <rhs>
         <alt>
            <terminalsymbol>a</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>b</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>c</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>d</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>e</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>f</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>g</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>h</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>i</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>j</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>k</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>l</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>m</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>n</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>o</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>p</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>q</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>r</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>s</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>t</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>u</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>v</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>w</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>x</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>y</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>z</terminalsymbol>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="simple Latin upper-case letter" predicative="no">
      <rhs>
         <alt>
            <terminalsymbol>A</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>B</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>C</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>D</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>E</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>F</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>G</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>H</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>I</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>J</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>K</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>L</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>M</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>N</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>O</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>P</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>Q</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>R</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>S</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>T</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>U</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>V</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>W</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>X</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>Y</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>Z</terminalsymbol>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="hex digit" predicative="no">
      <rhs>
         <alt>
            <BNF name="standard digit"/>
         </alt>
         <alt>
            <terminalsymbol>A</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>B</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>C</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>D</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>E</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>F</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>a</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>b</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>c</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>d</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>e</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>f</terminalsymbol>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="digit" predicative="no">
      <rhs>
         <alt>
            <BNF name="standard digit"/>
         </alt>
         <alt>
            <BNF name="other digit"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="standard digit" predicative="no">
      <rhs>
         <alt>
            <BNF name="octal digit"/>
         </alt>
         <alt>
            <terminalsymbol>8</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>9</terminalsymbol>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="octal digit" predicative="no">
      <rhs>
         <alt>
            <BNF name="binary digit"/>
         </alt>
         <alt>
            <terminalsymbol>2</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>3</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>4</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>5</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>6</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>7</terminalsymbol>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="binary digit" predicative="no">
      <rhs>
         <alt>
            <terminalsymbol>0</terminalsymbol>
         </alt>
         <alt>
            <terminalsymbol>1</terminalsymbol>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="other digit" predicative="no">
      <rhs>
         <seeTheRules/>
      </rhs>
   </BNFdef>
   <BNFdef name="GQL special character" predicative="no">
      <rhs>
         <alt>
            <BNF name="space"/>
         </alt>
         <alt>
            <BNF name="ampersand"/>
         </alt>
         <alt>
            <BNF name="asterisk"/>
         </alt>
         <alt>
            <BNF name="colon"/>
         </alt>
         <alt>
            <BNF name="equals operator"/>
         </alt>
         <alt>
            <BNF name="comma"/>
         </alt>
         <alt>
            <BNF name="commercial at"/>
         </alt>
         <alt>
            <BNF name="dollar sign"/>
         </alt>
         <alt>
            <BNF name="double quote"/>
         </alt>
         <alt>
            <BNF name="exclamation mark"/>
         </alt>
         <alt>
            <BNF name="grave accent"/>
         </alt>
         <alt>
            <BNF name="right angle bracket"/>
         </alt>
         <alt>
            <BNF name="left brace"/>
         </alt>
         <alt>
            <BNF name="left bracket"/>
         </alt>
         <alt>
            <BNF name="left paren"/>
         </alt>
         <alt>
            <BNF name="left angle bracket"/>
         </alt>
         <alt>
            <BNF name="minus sign"/>
         </alt>
         <alt>
            <BNF name="period"/>
         </alt>
         <alt>
            <BNF name="plus sign"/>
         </alt>
         <alt>
            <BNF name="question mark"/>
         </alt>
         <alt>
            <BNF name="quote"/>
         </alt>
         <alt>
            <BNF name="reverse solidus"/>
         </alt>
         <alt>
            <BNF name="right brace"/>
         </alt>
         <alt>
            <BNF name="right bracket"/>
         </alt>
         <alt>
            <BNF name="right paren"/>
         </alt>
         <alt>
            <BNF name="solidus"/>
         </alt>
         <alt>
            <BNF name="underscore"/>
         </alt>
         <alt>
            <BNF name="vertical bar"/>
         </alt>
         <alt>
            <BNF name="percent"/>
         </alt>
         <alt>
            <BNF name="tilde"/>
         </alt>
      </rhs>
   </BNFdef>
   <BNFdef name="space" predicative="no">
      <rhs>
         <terminalsymbol unicode="0020"> </terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="ampersand" predicative="no">
      <rhs>
         <terminalsymbol unicode="0026">&amp;</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="asterisk" predicative="no">
      <rhs>
         <terminalsymbol unicode="002A">*</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="colon" predicative="no">
      <rhs>
         <terminalsymbol unicode="003A">:</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="comma" predicative="no">
      <rhs>
         <terminalsymbol unicode="002C">,</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="commercial at" predicative="no">
      <rhs>
         <terminalsymbol unicode="0040">@</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="dollar sign" predicative="no">
      <rhs>
         <terminalsymbol unicode="0024">$</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="double quote" predicative="no">
      <rhs>
         <terminalsymbol unicode="0022">"</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="equals operator" predicative="no">
      <rhs>
         <terminalsymbol unicode="003D">=</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="exclamation mark" predicative="no">
      <rhs>
         <terminalsymbol unicode="0021">!</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="right angle bracket" predicative="no">
      <rhs>
         <terminalsymbol unicode="003E">&gt;</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="grave accent" predicative="no">
      <rhs>
         <terminalsymbol unicode="0060">`</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="left brace" predicative="no">
      <rhs>
         <terminalsymbol unicode="007B">{</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="left bracket" predicative="no">
      <rhs>
         <terminalsymbol unicode="005B">[</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="left paren" predicative="no">
      <rhs>
         <terminalsymbol unicode="0028">(</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="left angle bracket" predicative="no">
      <rhs>
         <terminalsymbol unicode="003C">&lt;</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="minus sign" predicative="no">
      <rhs>
         <terminalsymbol unicode="002D">-</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="percent" predicative="no">
      <rhs>
         <terminalsymbol unicode="0025">%</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="period" predicative="no">
      <rhs>
         <terminalsymbol unicode="002E">.</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="plus sign" predicative="no">
      <rhs>
         <terminalsymbol unicode="002B">+</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="question mark" predicative="no">
      <rhs>
         <terminalsymbol unicode="003F">?</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="quote" predicative="no">
      <rhs>
         <terminalsymbol unicode="0027">'</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="reverse solidus" predicative="no">
      <rhs>
         <terminalsymbol unicode="005C">\</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="right brace" predicative="no">
      <rhs>
         <terminalsymbol unicode="007D">}</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="right bracket" predicative="no">
      <rhs>
         <terminalsymbol unicode="005D">]</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="right paren" predicative="no">
      <rhs>
         <terminalsymbol unicode="0029">)</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="solidus" predicative="no">
      <rhs>
         <terminalsymbol unicode="002F">/</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="tilde" predicative="no">
      <rhs>
         <terminalsymbol unicode="007E">~</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="underscore" predicative="no">
      <rhs>
         <terminalsymbol unicode="005F">_</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="vertical bar" predicative="no">
      <rhs>
         <terminalsymbol unicode="007C">|</terminalsymbol>
      </rhs>
   </BNFdef>
   <BNFdef name="other language character" predicative="no">
      <rhs>
         <seeTheRules/>
      </rhs>
   </BNFdef>
</grammar>
